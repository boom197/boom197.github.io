<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux入门</title>
    <url>/2019/10/31/Linux/</url>
    <content><![CDATA[<p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
<a id="more"></a>

<h1 id="Linux服务器"><a href="#Linux服务器" class="headerlink" title="Linux服务器"></a>Linux服务器</h1><p>Linux服务器是设计出来进行业务处理应用的，在网络和计算机系统当中有广泛的应用，可以提供数据库管理和网络服务等内容，是一种性能非常高的和开源的服务器，在我国的计算机系统的客户端当中，有很多采用的就是Linux系统，其使用的范围非常广泛，用户体验反应较好。但是对于一些希望计算机应用性能比较高的单位而言，windows系统需要经常进行资源整合和碎片化管理，系统在配置的时候经常需要重新启动，这就无法避免产生停机的问题。同时，由于Linux系统的处理能力非常强悍，具备不可比拟的稳定性特征，因而Linux系统就不用经常进行重启，Linux系统的变化可以在配置的过程中实现，所以Linux服务器出现故障的概率比较小，所以很多企业组织在计算机配置的过程中经常使用Linux系统，从而降低服务器发生崩溃的可能性，很多企业在配置Linux系统的时候，都是通过减少服务器的故障发生率，实现企业业务的高效运转。</p>
<h1 id="Linux的发行版"><a href="#Linux的发行版" class="headerlink" title="Linux的发行版"></a>Linux的发行版</h1><p><img src="https://s2.ax1x.com/2019/10/31/K5OFc4.jpg" alt></p>
<p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p>
<h1 id="Linux的应用领域"><a href="#Linux的应用领域" class="headerlink" title="Linux的应用领域"></a>Linux的应用领域</h1><p> 今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。 </p>
<h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><p>可以去官网下载最新版本：<a href="https://www.centos.org/download/" target="_blank" rel="noopener">https://www.centos.org/download/</a></p>
<p>以下针对各个版本的ISO镜像文件，进行一一说明：</p>
<ul>
<li><strong>CentOS-7.0-x86_64-DVD-1503-01.iso</strong> : 标准安装版，一般下载这个就可以了（推荐）</li>
<li><strong>CentOS-7.0-x86_64-NetInstall-1503-01.iso</strong> : 网络安装镜像（从网络安装或者救援系统）</li>
<li><strong>CentOS-7.0-x86_64-Everything-1503-01.iso</strong>: 对完整版安装盘的软件进行补充，集成所有软件。（包含centos7的一套完整的软件包，可以用来安装系统或者填充本地镜像）</li>
<li><strong>CentOS-7.0-x86_64-GnomeLive-1503-01.iso</strong>: GNOME桌面版</li>
<li><strong>CentOS-7.0-x86_64-KdeLive-1503-01.iso</strong>: KDE桌面版</li>
<li><strong>CentOS-7.0-x86_64-livecd-1503-01.iso</strong> : 光盘上运行的系统，类拟于winpe</li>
<li><strong>CentOS-7.0-x86_64-minimal-1503-01.iso</strong> : 精简版，自带的软件最少</li>
</ul>
<blockquote>
<p><strong>注：</strong>建议安装64位Linux系统。</p>
<p>旧版本下载地址：<a href="https://wiki.centos.org/Download" target="_blank" rel="noopener">https://wiki.centos.org/Download</a></p>
</blockquote>
<h1 id="Linux系统目录结构"><a href="#Linux系统目录结构" class="headerlink" title="Linux系统目录结构"></a>Linux系统目录结构</h1><p><img src="https://s2.ax1x.com/2019/10/31/KIPgOK.jpg" alt></p>
<p> 以下是对这些目录的解释： </p>
<div class="tabs" id="目录"><ul class="nav-tabs"><li class="tab active"><a href="#目录-1">目录 1</a></li><li class="tab"><a href="#目录-2">目录 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="目录-1"><ul>
<li><p><strong>/boot：</strong>存放的启动Linux 时使用的内核文件，包括连接文件以及镜像文件。</p>
</li>
<li><p><strong>/etc：</strong>存放<strong>所有</strong>的系统需要的<strong>配置文件</strong>和<strong>子目录列表，</strong>更改目录下的文件可能会导致系统不能启动。</p>
</li>
<li><p><strong>/lib</strong>：存放基本代码库（比如c++库），其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p><strong>/sys</strong>： 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中</p>
</li>
</ul>
<p><strong>指令集合：</strong></p>
<ul>
<li><p><strong>/bin：</strong>存放着最常用的程序和指令</p>
</li>
<li><p><strong>/sbin：</strong>只有系统管理员能使用的程序和指令。</p>
</li>
</ul>
<p><strong>外部文件管理：</strong></p>
<ul>
<li><p><strong>/dev ：</strong>Device(设备)的缩写, 存放的是Linux的外部设备。<strong>注意：</strong>在Linux中访问设备和访问文件的方式是相同的。</p>
</li>
<li><p><strong>/media</strong>：类windows的<strong>其他设备，</strong>例如U盘、光驱等等，识别后linux会把设备放到这个目录下。</p>
</li>
<li><p><strong>/mnt</strong>：临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
</ul>
<p><strong>临时文件：</strong></p>
<ul>
<li><p><strong>/run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p>
</li>
<li><p><strong>/lost+found</strong>：一般情况下为空的，系统非法关机后，这里就存放一些文件。</p>
</li>
<li><p><strong>/tmp</strong>：这个目录是用来存放一些临时文件的。</p>
</li>
</ul>
<p><strong>账户：</strong></p>
<ul>
<li><p><strong>/root</strong>：系统管理员的用户主目录。</p>
</li>
<li><p><strong>/home</strong>：用户的主目录，以用户的账号命名的。</p>
</li>
<li><p><strong>/usr</strong>：用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p>
</li>
<li><p><strong>/usr/bin：</strong>系统用户使用的应用程序与指令。</p>
</li>
<li><p><strong>/usr/sbin：</strong>超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p><strong>/usr/src：</strong>内核源代码默认的放置目录。</p>
</li>
</ul>
<p><strong>运行过程中要用：</strong></p>
<ul>
<li><p><strong>/var</strong>：存放经常修改的数据，比如程序运行的日志文件（/var/log 目录下）。</p>
</li>
<li><p><strong>/proc</strong>：管理<strong>内存空间！</strong>虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。</p>
</li>
</ul>
<p><strong>扩展用的：</strong></p>
<ul>
<li><p><strong>/opt</strong>：默认是空的，我们安装额外软件可以放在这个里面。</p>
</li>
<li><p><strong>/srv</strong>：存放服务启动后需要提取的数据<strong>（不用服务器就是空）</strong></p>
</li>
</ul>
</div><div class="tab-pane" id="目录-2"><ul>
<li><p><strong>/bin</strong>：<br>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</p>
</li>
<li><p><strong>/boot：</strong><br>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p>
</li>
<li><p><strong>/dev ：</strong><br>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p>
</li>
<li><p><strong>/etc：</strong><br>这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p>
</li>
<li><p><strong>/home</strong>：<br>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p>
</li>
<li><p><strong>/lib</strong>：<br>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
</li>
<li><p><strong>/media</strong>：<br>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p>
</li>
<li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p><strong>/opt</strong>：<br> 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p>
</li>
<li><p><strong>/proc</strong>：<br>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo <span class="number">1</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4<span class="regexp">/icmp_echo_ignore_all</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p>
</li>
<li><p><strong>/sbin</strong>：<br>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p><strong>/selinux</strong>：<br> 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p>
</li>
<li><p><strong>/srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p>
</li>
<li><p><strong>/sys</strong>：</p>
<p> 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</p>
<p>sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。</p>
</li>
</ul>
<p>  该文件系统是内核设备树的一个直观反映。</p>
<p>  当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p>
<ul>
<li><p><strong>/tmp</strong>：<br>这个目录是用来存放一些临时文件的。</p>
</li>
<li><p><strong>/usr</strong>：<br> 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p>
</li>
<li><p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p>
</li>
<li><p><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</p>
</li>
<li><p><strong>/var</strong>：<br>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>
</li>
<li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p>
</li>
</ul>
</div></div></div>

<p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p>
<p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p>
<p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。</p>
<p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。</p>
<p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。</p>
<h1 id="Linux文件基本属性"><a href="#Linux文件基本属性" class="headerlink" title="Linux文件基本属性"></a>Linux文件基本属性</h1><p> Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。 </p>
<p> 在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组 ，如：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>www /]# ls -l</span><br><span class="line">total <span class="number">64</span></span><br><span class="line">dr-xr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Dec <span class="number">14</span>  <span class="number">2012</span> bin</span><br><span class="line">dr-xr-xr-x   <span class="number">4</span> root root <span class="number">4096</span> Apr <span class="number">19</span>  <span class="number">2012</span> boot</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>实例中，bin文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p>
<p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p>
<ul>
<li>当为[ <strong>d</strong> ]则是目录</li>
<li>当为[ <strong>-</strong> ]则是文件；</li>
<li>若是[ <strong>l</strong> ]则表示为链接文档(link file)；</li>
<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>
<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>
<p>每个文件的属性由左边第一部分的10个字符来确定（如下图）。</p>
<p><img src="https://s2.ax1x.com/2019/10/31/KIEXJe.png" alt></p>
<p>从左至右用0-9这些数字来表示。</p>
<p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。</p>
<p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>
<p>其中，第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p>
<p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p>
<h1 id="Linux文件属主和属组"><a href="#Linux文件属主和属组" class="headerlink" title="Linux文件属主和属组"></a>Linux文件属主和属组</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>www /]# ls -l</span><br><span class="line">total <span class="number">64</span></span><br><span class="line">drwxr-xr-x <span class="number">2</span> root  root  <span class="number">4096</span> Feb <span class="number">15</span> <span class="number">14</span>:<span class="number">46</span> cron</span><br><span class="line">drwxr-xr-x <span class="number">3</span> mysql mysql <span class="number">4096</span> Apr <span class="number">21</span>  <span class="number">2014</span> mysql</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>
<p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p>
<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>
<p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>
<p>在以上实例中，mysql 文件是一个目录文件，属主和属组都为 mysql，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限。</p>
<p>对于 root 用户来说，一般情况下，文件的权限对其不起作用。</p>
<h1 id="Linux-文件与目录管理"><a href="#Linux-文件与目录管理" class="headerlink" title="Linux 文件与目录管理"></a>Linux 文件与目录管理</h1><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p>
<p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p>
<p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p>
<ul>
<li><strong>绝对路径：</strong><br>路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录。</li>
<li><strong>相对路径：</strong><br>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： cd ../man 这就是相对路径的写法啦！</li>
</ul>
<h1 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h1><p>接下来我们就来看几个常见的处理目录的命令吧：</p>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p>列出目录：</p>
<ul>
<li>-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</li>
<li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li>
<li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>
</ul>
<h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>切换目录</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta">#使用 mkdir 命令创建 runoob 目录</span></span><br><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># mkdir runoob</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#使用绝对路径切换到 runoob 目录</span></span><br><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># cd /root/runoob/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#使用相对路径切换到 runoob 目录</span></span><br><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># cd ./runoob/</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 表示回到自己的家目录，亦即是 /root 这个目录</span></span><br><span class="line">[root<span class="symbol">@www</span> runoob]<span class="meta"># cd ~</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思；</span></span><br><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># cd ..</span></span><br></pre></td></tr></table></figure>

<h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>显示目前得目录</p>
<ul>
<li>-P ：显示出确实的路径，而非使用连结 (link) 路径。</li>
</ul>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>创建一个新的目录</p>
<ul>
<li><p>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</p>
</li>
<li><p>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-mp] 目录名称</span><br><span class="line"><span class="built_in">mkdir</span> -p test1/test2/test3/test4  --创建多层目录</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>删除一个空的目录</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">rmdir [-p] 目录名称   <span class="comment">--连同上一级『空的』目录也一起删除</span></span><br><span class="line">rmdir runoob/    <span class="comment">--删除 runoob 目录</span></span><br></pre></td></tr></table></figure>

<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>复制文件或目录</p>
<ul>
<li><p>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</p>
</li>
<li><p>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</p>
</li>
<li><p>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</p>
</li>
<li><p>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</p>
</li>
<li><p>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</p>
</li>
<li><p>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</p>
</li>
<li><p>-r：递归持续复制，用於目录的复制行为；(常用)</p>
</li>
<li><p>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</p>
</li>
<li><p>-u：若 destination 比 source 旧才升级 destination ！</p>
<p>用 root 身份，将 root 目录下的 .bashrc 复制到 /tmp 下，并命名为 bashrc </p>
</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># cp ~/.bashrc /tmp/bashrc</span></span><br><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># cp -i ~/.bashrc /tmp/bashrc</span></span><br><span class="line">cp: overwrite `/tmp/bashrc<span class="string">'? n  &lt;==n不覆盖，y为覆盖</span></span><br></pre></td></tr></table></figure>

<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>移除文件或目录：</p>
<ul>
<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>
<li>-i ：互动模式，在删除前会询问使用者是否动作</li>
<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">rm <span class="string">[-fir]</span> 文件或目录</span><br></pre></td></tr></table></figure>

<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>移动文件与目录，或修改名字：</p>
<ul>
<li><p>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</p>
</li>
<li><p>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</p>
</li>
<li><p>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</p>
<p>复制一文件，创建一目录，将文件移动到目录中 ：</p>
</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># cd /tmp</span></span><br><span class="line">[root<span class="symbol">@www</span> tmp]<span class="meta"># cp ~/.bashrc bashrc</span></span><br><span class="line">[root<span class="symbol">@www</span> tmp]<span class="meta"># mkdir mvtest</span></span><br><span class="line">[root<span class="symbol">@www</span> tmp]<span class="meta"># mv bashrc mvtest</span></span><br></pre></td></tr></table></figure>

<h1 id="Linux-文件内容查看"><a href="#Linux-文件内容查看" class="headerlink" title="Linux 文件内容查看"></a>Linux 文件内容查看</h1><p> Linux系统中使用以下命令来查看文件的内容： </p>
<ul>
<li><p>cat 由第一行开始显示文件内容</p>
</li>
<li><p>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒著写！</p>
</li>
<li><p>nl  显示的时候，顺道输出行号！</p>
</li>
<li><p>more 一页一页的显示文件内容</p>
</li>
<li><p>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</p>
</li>
<li><p>head 只看头几行</p>
</li>
<li><p>tail 只看尾巴几行</p>
<p>你可以使用 <em>man [命令]</em>来查看各个命令的使用文档，如 ：man cp。 </p>
</li>
</ul>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p> 由第一行开始显示文件内容 ：</p>
<p>选项与参数：</p>
<ul>
<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>
<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>
<li>-E ：将结尾的断行字节 $ 显示出来；</li>
<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>
<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>
<li>-v ：列出一些看不出来的特殊字符</li>
</ul>
<h2 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h2><p> 显示行号 </p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">nl <span class="string">[-bnw]</span> 文件</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>
<li>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在荧幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>
<li>-w ：行号栏位的占用的位数。</li>
</ul>
<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p> 一页一页翻动 ：在 more 这个程序的运行过程中，你有几个按键可以按的：</p>
<ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter     ：代表向下翻『一行』；</li>
<li>/字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f      ：立刻显示出档名以及目前显示的行数；</li>
<li>q       ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>
</ul>
<h1 id="Linux-用户和用户组管理"><a href="#Linux-用户和用户组管理" class="headerlink" title="Linux 用户和用户组管理"></a>Linux 用户和用户组管理</h1><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>
<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>
<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>
<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>
<ul>
<li>用户账号的添加、删除与修改。</li>
<li>用户口令的管理。</li>
<li>用户组的管理。</li>
</ul>
<h2 id="Linux系统用户账号的管理"><a href="#Linux系统用户账号的管理" class="headerlink" title="Linux系统用户账号的管理"></a>Linux系统用户账号的管理</h2><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>
<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。刚添加的账号是被锁定的，无法使用。</p>
<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>添加新的用户账号使用useradd命令，其语法如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">useradd</span> 选项 用户名</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p>选项:</p>
<ul>
<li>-c comment 指定一段注释性描述。</li>
<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li>
<li>-g 用户组 指定用户所属的用户组。</li>
<li>-G 用户组，用户组 指定用户所属的附加组。</li>
<li>-s Shell文件 指定用户的登录Shell。</li>
<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
</li>
<li><p>用户名:</p>
<p>指定新账号的登录名。</p>
</li>
</ul>
<p>实例1：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># useradd –d  /home/sam -m sam</span></span><br></pre></td></tr></table></figure>

<p> 此命令创建了一个用户sam，其中-d和-m选项用来为登录名sam产生一个主目录 /home/sam（/home为默认的用户主目录所在的父目录）。 </p>
<p>实列2：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># useradd -s <span class="regexp">/bin/</span>sh -g <span class="keyword">group</span> –G adm,root gem</span><br></pre></td></tr></table></figure>

<p>此命令新建了一个用户gem，该用户的登录Shell是 <code>/bin/sh</code>，它属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组。</p>
<p>这里可能新建组：<code>#groupadd group及groupadd adm</code></p>
<p>增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。</p>
<p>Linux提供了集成的系统管理工具userconf，它可以用来对用户账号进行统一管理。</p>
<h3 id="删除账号"><a href="#删除账号" class="headerlink" title="删除账号"></a>删除账号</h3><p>如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>
<p>删除一个已有的用户账号使用<code>userdel</code>命令，其格式如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">userdel</span> 选项 用户名</span><br></pre></td></tr></table></figure>

<p> 常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。 </p>
<p> 例如： </p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># userdel -r sam</span></span><br></pre></td></tr></table></figure>

<p> 此命令删除用户sam在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。 </p>
<h3 id="修改账号"><a href="#修改账号" class="headerlink" title="修改账号"></a>修改账号</h3><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p>
<p>修改已有用户的信息使用<code>usermod</code>命令，其格式如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">usermod</span> 选项 用户名</span><br></pre></td></tr></table></figure>

<p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值。</p>
<p>另外，有些系统可以使用选项：-l 新用户名</p>
<p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p>
<p>例如：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># usermod -s <span class="regexp">/bin/</span>ksh -d <span class="regexp">/home/</span>z –g developer sam</span><br></pre></td></tr></table></figure>

<p>此命令将用户sam的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p>
<h3 id="用户口令得管理"><a href="#用户口令得管理" class="headerlink" title="用户口令得管理"></a>用户口令得管理</h3><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p>
<p>指定和修改用户口令的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">passwd</span> 选项 用户名</span><br></pre></td></tr></table></figure>

<p>可使用的选项：</p>
<ul>
<li>-l 锁定口令，即禁用账号。</li>
<li>-u 口令解锁。</li>
<li>-d 使账号无口令。</li>
<li>-f 强迫用户下次登录时修改口令。</li>
</ul>
<p>如果默认用户名，则修改当前用户的口令。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># passwd -d sam</span></span><br></pre></td></tr></table></figure>

<p>此命令将用户 sam 的口令删除，这样用户 sam 下一次登录时，系统就不再允许该用户登录了。</p>
<p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># passwd -l sam</span></span><br></pre></td></tr></table></figure>

<h1 id="Linux-vi-vim"><a href="#Linux-vi-vim" class="headerlink" title="Linux vi/vim"></a>Linux vi/vim</h1><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>
<p>但是目前我们使用比较多的是 vim 编辑器。</p>
<p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p>
<p>相关文章：<a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html" target="_blank" rel="noopener">史上最全Vim快捷键键位图 — 入门到进阶</a> </p>
<h2 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h2><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>
<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p>
<p>连 vim 的官方网站 (<a href="http://www.vim.org/" target="_blank" rel="noopener">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>
<h2 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi/vim 的使用"></a>vi/vim 的使用</h2><p> 基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是： </p>
<h3 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li><strong>i</strong> 切换到输入模式，以输入字符。</li>
<li><strong>x</strong> 删除当前光标所在处的字符。</li>
<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li>
</ul>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下i就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul>
<li>q 退出程序</li>
<li>w 保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>
<p><img src="https://s2.ax1x.com/2019/10/31/KIGdv6.png" alt></p>
<h2 id="vi-vim-使用实例"><a href="#vi-vim-使用实例" class="headerlink" title="vi/vim 使用实例"></a>vi/vim 使用实例</h2><h3 id="使用-vi-vim-进入一般模式"><a href="#使用-vi-vim-进入一般模式" class="headerlink" title="使用 vi/vim 进入一般模式"></a>使用 vi/vim 进入一般模式</h3><p>如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>vim runoob.txt</span><br></pre></td></tr></table></figure>

<p>直接输入 <strong>vi 文件名</strong> 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</p>
<h2 id="vi-vim-按键说明"><a href="#vi-vim-按键说明" class="headerlink" title="vi/vim 按键说明"></a>vi/vim 按键说明</h2><p> 除了 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。 </p>
<table>
<thead>
<tr>
<th align="left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td align="left">j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td align="left">k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td align="left">l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td align="left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td>
<td></td>
</tr>
<tr>
<td align="left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td align="left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td align="left">+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td align="left">-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td align="left">n<space></space></td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</space></td>
</tr>
<tr>
<td align="left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td align="left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td align="left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td align="left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td align="left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td align="left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>
</tr>
<tr>
<td align="left">n<Enter></Enter></td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">搜索替换</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">/word</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td>
</tr>
<tr>
<td align="left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td align="left">n</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td align="left">N</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
<tr>
<td align="left">使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td>
<td></td>
</tr>
<tr>
<td align="left">:n1,n2s/word1/word2/g</td>
<td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td>
</tr>
<tr>
<td align="left"><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td>
</tr>
<tr>
<td align="left"><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">删除、复制与贴上</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td align="left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td align="left">dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td align="left">ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>
</tr>
<tr>
<td align="left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td align="left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td align="left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td align="left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td align="left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td align="left">y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td align="left">yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td align="left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td align="left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td>
</tr>
<tr>
<td align="left">J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td align="left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td align="left">u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td align="left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
<tr>
<td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td>
<td></td>
</tr>
<tr>
<td align="left">.</td>
<td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td>
</tr>
</tbody></table>
<h3 id="一般模式切换到指令行模式的可用的按钮说明"><a href="#一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="一般模式切换到指令行模式的可用的按钮说明"></a>一般模式切换到指令行模式的可用的按钮说明</h3><table>
<thead>
<tr>
<th align="left">指令行的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td align="left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td align="left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td align="left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td align="left">:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td align="left">ZZ</td>
<td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td>
</tr>
<tr>
<td align="left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td align="left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td align="left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td align="left">:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">vim 环境的变更</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:set nu</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td align="left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody></table>
<p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p>
<p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>
<h1 id="Linux命令大全"><a href="#Linux命令大全" class="headerlink" title="Linux命令大全"></a>Linux命令大全</h1><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a><strong>系统信息</strong></h2><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">arch 显示机器的处理器架构(<span class="number">1</span>) </span><br><span class="line">uname -m 显示机器的处理器架构(<span class="number">2</span>) </span><br><span class="line">uname -r 显示正在使用的内核版本 </span><br><span class="line">dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI) </span><br><span class="line">hdparm -i /dev/hda 罗列一个磁盘的架构特性 </span><br><span class="line">hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 </span><br><span class="line">cat /<span class="keyword">proc</span>/cpuinfo 显示CPU<span class="title"> info的信息</span> </span><br><span class="line">cat /<span class="keyword">proc</span>/interrupts 显示中断 </span><br><span class="line">cat /<span class="keyword">proc</span>/meminfo 校验内存使用 </span><br><span class="line">cat /<span class="keyword">proc</span>/swaps 显示哪些swap被使用 </span><br><span class="line">cat /<span class="keyword">proc</span>/version 显示内核的版本 </span><br><span class="line">cat /<span class="keyword">proc</span>/net/dev 显示网络适配器及统计 </span><br><span class="line">cat /<span class="keyword">proc</span>/mounts 显示已加载的文件系统 </span><br><span class="line">lspci -tv 罗列<span class="title"> PCI</span> 设备 </span><br><span class="line">lsusb -tv 显示<span class="title"> USB</span> 设备 </span><br><span class="line">date 显示系统日期 </span><br><span class="line">cal 2007 显示2007年的日历表 </span><br><span class="line">date 041217002007.00 设置日期和时间 - 月日时分年.秒 </span><br><span class="line">clock -w 将时间修改保存到<span class="title"> BIOS</span></span><br></pre></td></tr></table></figure>

<h2 id="关机-系统的关机、重启以及登出"><a href="#关机-系统的关机、重启以及登出" class="headerlink" title="关机 (系统的关机、重启以及登出 )"></a><strong>关机 (系统的关机、重启以及登出 )</strong></h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">shutdown</span> <span class="string">-h now 关闭系统(1) </span></span><br><span class="line"><span class="attr">init</span> <span class="string">0 关闭系统(2) </span></span><br><span class="line"><span class="attr">telinit</span> <span class="string">0 关闭系统(3) </span></span><br><span class="line"><span class="attr">shutdown</span> <span class="string">-h hours:minutes &amp; 按预定时间关闭系统 </span></span><br><span class="line"><span class="attr">shutdown</span> <span class="string">-c 取消按预定时间关闭系统 </span></span><br><span class="line"><span class="attr">shutdown</span> <span class="string">-r now 重启(1) </span></span><br><span class="line"><span class="attr">reboot</span> <span class="string">重启(2) </span></span><br><span class="line"><span class="attr">logout</span> <span class="string">注销</span></span><br></pre></td></tr></table></figure>

<h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/home 进入 '/ home' 目录' </span></span><br><span class="line"><span class="attr">cd</span> <span class="string">.. 返回上一级目录 </span></span><br><span class="line"><span class="attr">cd</span> <span class="string">../.. 返回上两级目录 </span></span><br><span class="line"><span class="attr">cd</span> <span class="string">进入个人的主目录 </span></span><br><span class="line"><span class="attr">cd</span> <span class="string">~user1 进入个人的主目录 </span></span><br><span class="line"><span class="attr">cd</span> <span class="string">- 返回上次所在的目录 </span></span><br><span class="line"><span class="attr">pwd</span> <span class="string">显示工作路径 </span></span><br><span class="line"><span class="attr">ls</span> <span class="string">查看目录中的文件 </span></span><br><span class="line"><span class="attr">ls</span> <span class="string">-F 查看目录中的文件 </span></span><br><span class="line"><span class="attr">ls</span> <span class="string">-l 显示文件和目录的详细资料 </span></span><br><span class="line"><span class="attr">ls</span> <span class="string">-a 显示隐藏文件 </span></span><br><span class="line"><span class="attr">ls</span> <span class="string">*[0-9]* 显示包含数字的文件名和目录名 </span></span><br><span class="line"><span class="attr">tree</span> <span class="string">显示文件和目录由根目录开始的树形结构(1) </span></span><br><span class="line"><span class="attr">lstree</span> <span class="string">显示文件和目录由根目录开始的树形结构(2) </span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">dir1 创建一个叫做 'dir1' 的目录' </span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">dir1 dir2 同时创建两个目录 </span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">-p /tmp/dir1/dir2 创建一个目录树 </span></span><br><span class="line"><span class="attr">rm</span> <span class="string">-f file1 删除一个叫做 'file1' 的文件' </span></span><br><span class="line"><span class="attr">rmdir</span> <span class="string">dir1 删除一个叫做 'dir1' 的目录' </span></span><br><span class="line"><span class="attr">rm</span> <span class="string">-rf dir1 删除一个叫做 'dir1' 的目录并同时删除其内容 </span></span><br><span class="line"><span class="attr">rm</span> <span class="string">-rf dir1 dir2 同时删除两个目录及它们的内容 </span></span><br><span class="line"><span class="attr">mv</span> <span class="string">dir1 new_dir 重命名/移动 一个目录 </span></span><br><span class="line"><span class="attr">cp</span> <span class="string">file1 file2 复制一个文件 </span></span><br><span class="line"><span class="attr">cp</span> <span class="string">dir/* . 复制一个目录下的所有文件到当前工作目录 </span></span><br><span class="line"><span class="attr">cp</span> <span class="string">-a /tmp/dir1 . 复制一个目录到当前工作目录 </span></span><br><span class="line"><span class="attr">cp</span> <span class="string">-a dir1 dir2 复制一个目录 </span></span><br><span class="line"><span class="attr">ln</span> <span class="string">-s file1 lnk1 创建一个指向文件或目录的软链接 </span></span><br><span class="line"><span class="attr">ln</span> <span class="string">file1 lnk1 创建一个指向文件或目录的物理链接 </span></span><br><span class="line"><span class="attr">touch</span> <span class="string">-t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm) </span></span><br><span class="line"><span class="attr">file</span> <span class="string">file1 outputs the mime type of the file as text </span></span><br><span class="line"><span class="attr">iconv</span> <span class="string">-l 列出已知的编码</span></span><br></pre></td></tr></table></figure>

<h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a><strong>文件搜索</strong></h2><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -<span class="built_in">name</span> file1 从 <span class="string">'/'</span> 开始进入根文件系统搜索文件和目录 </span><br><span class="line"><span class="built_in">find</span> / -user user1 搜索属于用户 <span class="string">'user1'</span> 的文件和目录 </span><br><span class="line"><span class="built_in">find</span> /home/user1 -<span class="built_in">name</span> \*.bin 在目录 <span class="string">'/ home/user1'</span> 中搜索带有<span class="string">'.bin'</span> 结尾的文件 </span><br><span class="line"><span class="built_in">find</span> /usr/bin -<span class="built_in">type</span> f -atime +<span class="number">100</span> 搜索在过去<span class="number">100</span>天内未被使用过的执行文件 </span><br><span class="line"><span class="built_in">find</span> /usr/bin -<span class="built_in">type</span> f -mtime -<span class="number">10</span> 搜索在<span class="number">10</span>天内被创建或者修改过的文件 </span><br><span class="line"><span class="built_in">find</span> / -<span class="built_in">name</span> \*.rpm -<span class="built_in">exec</span> chmod <span class="number">755</span> <span class="string">'&#123;&#125;'</span> \; 搜索以 <span class="string">'.rpm'</span> 结尾的文件并定义其权限 </span><br><span class="line"><span class="built_in">find</span> / -xdev -<span class="built_in">name</span> \*.rpm 搜索以 <span class="string">'.rpm'</span> 结尾的文件，忽略光驱、捷盘等可移动设备 </span><br><span class="line">locate \*.ps 寻找以 <span class="string">'.ps'</span> 结尾的文件 - 先运行 <span class="string">'updatedb'</span> 命令 </span><br><span class="line">whereis <span class="built_in">halt</span> 显示一个二进制文件、源码或man的位置 </span><br><span class="line">which <span class="built_in">halt</span> 显示一个二进制文件或可执行文件的完整路径</span><br></pre></td></tr></table></figure>

<h2 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a><strong>挂载一个文件系统</strong></h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mount <span class="regexp">/dev/</span>hda2 <span class="regexp">/mnt/</span>hda2 挂载一个叫做hda2的盘 - 确定目录 <span class="string">'/ mnt/hda2'</span> 已经存在 </span><br><span class="line">umount <span class="regexp">/dev/</span>hda2 卸载一个叫做hda2的盘 - 先从挂载点 <span class="string">'/ mnt/hda2'</span> 退出 </span><br><span class="line">fuser -km <span class="regexp">/mnt/</span>hda2 当设备繁忙时强制卸载 </span><br><span class="line">umount -n <span class="regexp">/mnt/</span>hda2 运行卸载操作而不写入 <span class="regexp">/etc/m</span>tab 文件- 当文件为只读或当磁盘写满时非常有用 </span><br><span class="line">mount <span class="regexp">/dev/</span>fd0 <span class="regexp">/mnt/</span>floppy 挂载一个软盘 </span><br><span class="line">mount <span class="regexp">/dev/</span>cdrom <span class="regexp">/mnt/</span>cdrom 挂载一个cdrom或dvdrom </span><br><span class="line">mount <span class="regexp">/dev/</span>hdc <span class="regexp">/mnt/</span>cdrecorder 挂载一个cdrw或dvdrom </span><br><span class="line">mount <span class="regexp">/dev/</span>hdb <span class="regexp">/mnt/</span>cdrecorder 挂载一个cdrw或dvdrom </span><br><span class="line">mount -o loop file.iso <span class="regexp">/mnt/</span>cdrom 挂载一个文件或ISO镜像文件 </span><br><span class="line">mount -t vfat <span class="regexp">/dev/</span>hda5 <span class="regexp">/mnt/</span>hda5 挂载一个Windows FAT32文件系统 </span><br><span class="line">mount <span class="regexp">/dev/</span>sda1 <span class="regexp">/mnt/u</span>sbdisk 挂载一个usb 捷盘或闪存设备 </span><br><span class="line">mount -t smbfs -o username=user,password=pass <span class="regexp">//</span>WinClient<span class="regexp">/share /m</span>nt<span class="regexp">/share 挂载一个windows网络共享</span></span><br></pre></td></tr></table></figure>

<h2 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a><strong>磁盘空间</strong></h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">df -<span class="keyword">h</span> 显示已经挂载的分区列表 </span><br><span class="line"><span class="keyword">ls</span> -lSr |<span class="keyword">more</span> 以尺寸大小排列文件和目录 </span><br><span class="line">du -<span class="keyword">sh</span> dir1 估算目录 'dir1' 已经使用的磁盘空间' </span><br><span class="line">du -sk * | <span class="keyword">sort</span> -rn 以容量大小为依据依次显示文件和目录的大小 </span><br><span class="line">rpm -q -a --qf '%10&#123;SIZE&#125;t%&#123;NAME&#125;<span class="keyword">n</span>' | <span class="keyword">sort</span> -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统) </span><br><span class="line">dpkg-<span class="keyword">query</span> -W -f='<span class="variable">$&#123;Installed</span>-Size;10&#125;t<span class="variable">$&#123;Package&#125;</span><span class="keyword">n</span>' | <span class="keyword">sort</span> -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</span><br></pre></td></tr></table></figure>

<h2 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a><strong>打包和压缩文件</strong></h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">bunzip2 file1<span class="selector-class">.bz2</span> 解压一个叫做 <span class="string">'file1.bz2'</span>的文件 </span><br><span class="line">bzip2 file1 压缩一个叫做 <span class="string">'file1'</span> 的文件 </span><br><span class="line">gunzip file1<span class="selector-class">.gz</span> 解压一个叫做 <span class="string">'file1.gz'</span>的文件 </span><br><span class="line">gzip file1 压缩一个叫做 <span class="string">'file1'</span>的文件 </span><br><span class="line">gzip -<span class="number">9</span> file1 最大程度压缩 </span><br><span class="line">rar <span class="selector-tag">a</span> file1<span class="selector-class">.rar</span> test_file 创建一个叫做 <span class="string">'file1.rar'</span> 的包 </span><br><span class="line">rar <span class="selector-tag">a</span> file1<span class="selector-class">.rar</span> file1 file2 dir1 同时压缩 <span class="string">'file1'</span>, <span class="string">'file2'</span> 以及目录 <span class="string">'dir1'</span> </span><br><span class="line">rar x file1<span class="selector-class">.rar</span> 解压rar包 </span><br><span class="line">unrar x file1<span class="selector-class">.rar</span> 解压rar包 </span><br><span class="line">tar -cvf archive<span class="selector-class">.tar</span> file1 创建一个非压缩的 tarball </span><br><span class="line">tar -cvf archive<span class="selector-class">.tar</span> file1 file2 dir1 创建一个包含了 <span class="string">'file1'</span>, <span class="string">'file2'</span> 以及 <span class="string">'dir1'</span>的档案文件 </span><br><span class="line">tar -tf archive<span class="selector-class">.tar</span> 显示一个包中的内容 </span><br><span class="line">tar -xvf archive<span class="selector-class">.tar</span> 释放一个包 </span><br><span class="line">tar -xvf archive<span class="selector-class">.tar</span> -C /tmp 将压缩包释放到 /tmp目录下 </span><br><span class="line">tar -cvfj archive<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> dir1 创建一个bzip2格式的压缩包 </span><br><span class="line">tar -xvfj archive<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> 解压一个bzip2格式的压缩包 </span><br><span class="line">tar -cvfz archive<span class="selector-class">.tar</span><span class="selector-class">.gz</span> dir1 创建一个gzip格式的压缩包 </span><br><span class="line">tar -xvfz archive<span class="selector-class">.tar</span><span class="selector-class">.gz</span> 解压一个gzip格式的压缩包 </span><br><span class="line">zip file1<span class="selector-class">.zip</span> file1 创建一个zip格式的压缩包 </span><br><span class="line">zip -r file1<span class="selector-class">.zip</span> file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 </span><br><span class="line">unzip file1<span class="selector-class">.zip</span> 解压一个zip格式压缩包</span><br></pre></td></tr></table></figure>

<h2 id="YUM-软件包升级器-（Fedora-RedHat及类似系统）"><a href="#YUM-软件包升级器-（Fedora-RedHat及类似系统）" class="headerlink" title="YUM 软件包升级器 - （Fedora, RedHat及类似系统）"></a><strong>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</strong></h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install package_name 下载并安装一个rpm包 </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">update package_name.rpm 更新当前系统中所有安装的rpm包 </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">update package_name 更新一个rpm包 </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">remove package_name 删除一个rpm包 </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">list 列出当前系统中安装的所有包 </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">search package_name 在rpm仓库中搜寻软件包 </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">clean packages 清理rpm缓存删除下载的包 </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">clean headers 删除所有头文件 </span></span><br><span class="line"><span class="attr">yum</span> <span class="string">clean all 删除所有缓存的包和头文件</span></span><br></pre></td></tr></table></figure>

<h2 id="APT-软件工具-Debian-Ubuntu-以及类似系统"><a href="#APT-软件工具-Debian-Ubuntu-以及类似系统" class="headerlink" title="APT 软件工具 (Debian, Ubuntu 以及类似系统)"></a><strong>APT 软件工具 (Debian, Ubuntu 以及类似系统)</strong></h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install package_name 安装/更新一个 deb 包 </span><br><span class="line">apt-cdrom install package_name 从光盘安装/更新一个 deb 包 </span><br><span class="line">apt-<span class="builtin-name">get</span> update 升级列表中的软件包 </span><br><span class="line">apt-<span class="builtin-name">get</span><span class="built_in"> upgrade </span>升级所有已安装的软件 </span><br><span class="line">apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> package_name 从系统删除一个deb包 </span><br><span class="line">apt-<span class="builtin-name">get</span> check 确认依赖的软件仓库正确 </span><br><span class="line">apt-<span class="builtin-name">get</span> clean 从下载的软件包中清理缓存 </span><br><span class="line">apt-cache search searched-package 返回包含所要搜索字符串的软件包名称</span><br></pre></td></tr></table></figure>

<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a><strong>网络</strong></h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">连接网络：ifup eth0</span><br><span class="line">查看网络信息：ifconfig</span><br><span class="line"></span><br><span class="line">ifconfig eth0 显示一个以太网卡的配置 </span><br><span class="line">ifup eth0 启用一个 <span class="string">'eth0'</span> 网络设备 </span><br><span class="line">ifdown eth0 禁用一个 <span class="string">'eth0'</span> 网络设备 </span><br><span class="line">ifconfig eth0 <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> 控制IP地址 </span><br><span class="line">ifconfig eth0 promisc 设置 <span class="string">'eth0'</span> 成混杂模式以嗅探数据包 (sniffing) </span><br><span class="line">dhclient eth0 以dhcp模式启用 <span class="string">'eth0'</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>IDEA入门</title>
    <url>/2019/10/30/IDEA%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p> IDEA 全称IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品。</p>
<a id="more"></a>

<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="创建Java项目"><a href="#创建Java项目" class="headerlink" title="创建Java项目"></a>创建Java项目</h2><p>打开IDEA，选择 Create New Project ，一路Next。</p>
<img src="https://s2.ax1x.com/2019/10/30/K4n6EV.png" style="zoom: 80%;">

<img src="https://s2.ax1x.com/2019/10/30/K4nsH0.png">

<p>M：编写完java代码，怎么运行呢？</p>
<p>Z：点击右边的开始按钮，选择运行项目main方法</p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4u5Rg.png" alt></p>
<p>M：idea怎么进行编译呢？</p>
<p>Z：点击编译按钮，target中的红色文件夹中就是编译后的文件，一般运行的时候会自动编译。</p>
<img src="https://s2.ax1x.com/2019/10/30/K4KFdx.png">

<h2 id="创建Web项目"><a href="#创建Web项目" class="headerlink" title="创建Web项目"></a>创建Web项目</h2><p>创建Web项目使用Java Enterprise，同时对Tomcat的路径进行配置：</p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4KTfO.png" alt></p>
<p>选择Web Application</p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4MEBn.png" alt></p>
<p>M：在idea中怎么创建资源文件夹？</p>
<p>Z：右键新建文件夹</p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4MQc4.png" alt></p>
<p> 另外还要将普通文件夹指定为资源文件夹才会被编译 </p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4MX2F.png" alt></p>
<h2 id="创建maven的jar项目"><a href="#创建maven的jar项目" class="headerlink" title="创建maven的jar项目"></a>创建maven的jar项目</h2><p> 要创建maven的jar项目，选择maven之后直接next </p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4Qk8O.png" alt></p>
<p> 填入项目名和位置，点击next </p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4QdI0.png" alt></p>
<h2 id="创建maven的war项目"><a href="#创建maven的war项目" class="headerlink" title="创建maven的war项目"></a>创建maven的war项目</h2><p> 要创建maven的war项目，选择Maven，打勾通过原型创建，选择webapp </p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4QyM4.png" alt></p>
<p> 输入项目名，地址点击下一步 </p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4Q2ZR.png" alt></p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4Qhi6.png" alt></p>
<p> Z：这里要将欠缺的文件夹（java，resource）补全，并且将其设置为Sources Root和Resources Root具有功能的文件夹（转化之后才能往里面添加class和xml文件） </p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4QqeA.png" alt></p>
<h1 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h1><p>M：新建完Web项目之后怎么启动呢？</p>
<p>Z：配置tomcat</p>
<h2 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h2><p>通过配置Tomcat启动，选择Edit Configurations</p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4l1T1.png" alt></p>
<p>配置Local的Tomcat</p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4l26g.png" alt></p>
<p>填写tomcat名，配置tomcat位置</p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4lqcF.png" alt></p>
<p>点击加号+，选择Artifact..</p>
<p><img src="https://s2.ax1x.com/2019/10/30/K41P1O.png" alt></p>
<p> 添加已解释的war包 </p>
<p><img src="https://s2.ax1x.com/2019/10/30/K41W8K.png" alt></p>
<p>运行tomcat即可进行访问</p>
<p><img src="https://s2.ax1x.com/2019/10/30/K48QmQ.png" alt></p>
<h2 id="插件的方式启动"><a href="#插件的方式启动" class="headerlink" title="插件的方式启动"></a>插件的方式启动</h2><ol>
<li>pom.xml添加tomcat配置 </li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 2.添加Maven，填入运行指令则配置好插件tomcat </p>
<p><img src="https://s2.ax1x.com/2019/10/30/K48v7j.png" alt></p>
<p>同样方式点击即可运行。</p>
<p><img src="https://s2.ax1x.com/2019/10/30/K4GmNR.png" alt></p>
<br>

<h1 id="常用的快捷键"><a href="#常用的快捷键" class="headerlink" title="常用的快捷键"></a>常用的快捷键</h1><h2 id="跟eclipse不同的快捷键"><a href="#跟eclipse不同的快捷键" class="headerlink" title="跟eclipse不同的快捷键"></a>跟eclipse不同的快捷键</h2><h3 id="查找类"><a href="#查找类" class="headerlink" title="查找类"></a>查找类</h3><p> Ctrl+N </p>
<h3 id="移动上下行"><a href="#移动上下行" class="headerlink" title="移动上下行"></a>移动上下行</h3><p> Ctrl + shift + ↑/↓ </p>
<h3 id="快速复制-删除行"><a href="#快速复制-删除行" class="headerlink" title="快速复制/删除行"></a>快速复制/删除行</h3><p> Ctrl+D复制，Ctrl+X粘贴 </p>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p> Ctrl+F，搜索并替换的快捷键是Ctrl+R </p>
<h3 id="项目切换"><a href="#项目切换" class="headerlink" title="项目切换"></a>项目切换</h3><p> Alt+←/→ ，前进后退导航Ctrl + Alt + ←/→ </p>
<h3 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h3><p> Ctrl + N搜索文件，Ctrl + Shift + N搜索文件夹，Alt+F7(+Fn)搜索文字，Ctrl + Shift + F搜索文字并显示代码详情。 </p>
<h3 id="set-get"><a href="#set-get" class="headerlink" title="set get"></a>set get</h3><p> Alt+Insert </p>
<h3 id="重构重命名"><a href="#重构重命名" class="headerlink" title="重构重命名"></a>重构重命名</h3><p> Shift+F6 (+Fn) </p>
<h3 id="重构提取方法"><a href="#重构提取方法" class="headerlink" title="重构提取方法"></a>重构提取方法</h3><p> Ctrl+Alt+M </p>
<h3 id="运行或者调试"><a href="#运行或者调试" class="headerlink" title="运行或者调试"></a>运行或者调试</h3><p> 运行Shift+F10，调试Shift+F9 </p>
<h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p> 进入F7 (+Fn) ，跨出F8 (+Fn) </p>
<h3 id="补全代码"><a href="#补全代码" class="headerlink" title="补全代码"></a>补全代码</h3><p> main方法psvm，输出代码sout，可以写成 “输出语句的内容”.sout (string字符串+.sout)的形式。 </p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p> 使用<strong>arr.fori</strong>就可以直接生成一段for循环代码。foreach的循环用<strong>arr.iter</strong> </p>
<h3 id="去除-导入包"><a href="#去除-导入包" class="headerlink" title="去除/导入包"></a>去除/导入包</h3><p> Ctrl + Alt + O </p>
<h2 id="新的好用的快捷键"><a href="#新的好用的快捷键" class="headerlink" title="新的好用的快捷键"></a>新的好用的快捷键</h2><h3 id="全屏编辑模式"><a href="#全屏编辑模式" class="headerlink" title="全屏编辑模式"></a>全屏编辑模式</h3><p> Ctrl+ shift + F12 (+Fn) </p>
<h3 id="在类中的方法之间切换"><a href="#在类中的方法之间切换" class="headerlink" title="在类中的方法之间切换"></a>在类中的方法之间切换</h3><p> Ctrl + F12(+Fn) </p>
<h3 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h3><p> Ctrl+Alt+U </p>
<h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p> F5(+Fn)，也有移动，是F6(+Fn) </p>
<h3 id="定位错误"><a href="#定位错误" class="headerlink" title="定位错误"></a>定位错误</h3><p> F2(+Fn)，上一个用Shift + F2(+Fn) </p>
<h3 id="处理明显的语法错误"><a href="#处理明显的语法错误" class="headerlink" title="处理明显的语法错误"></a>处理明显的语法错误</h3><p> Ctrl + Shift + 回车 </p>
<h3 id="查看接口"><a href="#查看接口" class="headerlink" title="查看接口"></a>查看接口</h3><p> Ctrl + Shift + B即可查看实现的类列表 </p>
<h3 id="参数信息"><a href="#参数信息" class="headerlink" title="参数信息"></a>参数信息</h3><p> Ctrl + P可以显示参数信息进行提示 </p>
<h3 id="搜索所有文件"><a href="#搜索所有文件" class="headerlink" title="搜索所有文件"></a>搜索所有文件</h3><p> 双击Shift </p>
<h2 id="偶尔用到的快捷键"><a href="#偶尔用到的快捷键" class="headerlink" title="偶尔用到的快捷键"></a>偶尔用到的快捷键</h2><h3 id="快速选择代码"><a href="#快速选择代码" class="headerlink" title="快速选择代码"></a>快速选择代码</h3><p> 基于语法选择使用Ctrl + W，要缩小选择范围Ctrl + Shift + W </p>
<h3 id="快速格式化代码"><a href="#快速格式化代码" class="headerlink" title="快速格式化代码"></a>快速格式化代码</h3><p> Ctrl + Alt + L </p>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p> Ctrl + I </p>
<h3 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h3><p> Ctrl + O </p>
<h3 id="查看类的继承，实现关系"><a href="#查看类的继承，实现关系" class="headerlink" title="查看类的继承，实现关系"></a>查看类的继承，实现关系</h3><p> Ctrl + H </p>
<br>

<blockquote>
<p>来源： <a href="https://blog.csdn.net/qq_30258957/article/details/81638875" target="_blank" rel="noopener">https://blog.csdn.net/qq_30258957/article/details/81638875</a> </p>
<p>参考： <a href="https://blog.csdn.net/qq_31655965/article/details/53424531" target="_blank" rel="noopener">https://blog.csdn.net/qq_31655965/article/details/53424531</a> </p>
</blockquote>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的使用</title>
    <url>/2019/10/28/Git/</url>
    <content><![CDATA[<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>
<a id="more"></a>

<h1 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h1><p>在 Windows 平台上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行：</p>
<p>安装包下载地址：<a href="https://gitforwindows.org/" target="_blank" rel="noopener">https://gitforwindows.org/</a></p>
<p>安装教程按照百度：<a href="https://jingyan.baidu.com/article/fb48e8bedb379d6e632e145d.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/fb48e8bedb379d6e632e145d.html</a></p>
<p>完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。</p>
<p>在开始菜单里找到”Git”-&gt;”Git Bash”，会弹出 Git 命令窗口，你可以在该窗口进行 Git 操作。</p>
<p> 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。 </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"用户名"</span>  --填写自己的用户名</span><br><span class="line">git cinfig --global user.email <span class="string">"邮箱"</span>   --填写自己的邮箱</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：git config –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p>
</blockquote>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p><img src="/2019/10/28/Git/1.jpg" alt="工作原理"></p>
<ul>
<li>Workspace：工作区（本地）</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h1 id="SVN与Git的最主要的区别？"><a href="#SVN与Git的最主要的区别？" class="headerlink" title="SVN与Git的最主要的区别？"></a>SVN与Git的最主要的区别？</h1><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p>
<p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><blockquote>
<p>什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p>
</blockquote>
<p>所以创建一个版本库也非常简单，就是在我的电脑创建一个文件目录，比如我的是：E：//github。</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在github目录下，点击鼠标右键，选择Git Base Here，输入命令</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure>

<p>该命令执行完后会在当前目录生成一个 .git 目录。</p>
<p>使用我们指定目录作为Git仓库。初始化后，会在 github 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p>
<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">add</span> *.c   <span class="comment">--添加到缓存区</span></span><br><span class="line">$ git <span class="keyword">add</span> README   <span class="comment">--添加到缓存区</span></span><br><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">'文件注释'</span>   <span class="comment">--把文件提交到仓库</span></span><br></pre></td></tr></table></figure>

<p>以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p>
<p>现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令<code>git status</code>来查看是否还有文件未提交。</p>
<p>如果有红色的字出现，说明文件已被修改，但未提交。</p>
<h1 id="工作区与暂存区的区别"><a href="#工作区与暂存区的区别" class="headerlink" title="工作区与暂存区的区别"></a>工作区与暂存区的区别</h1><p>工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</p>
<p>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：</p>
<p>第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> –<span class="selector-tag">C</span> “<span class="selector-tag">youremail</span>@<span class="keyword">example</span>.<span class="keyword">com</span>”</span><br></pre></td></tr></table></figure>

<p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>
<p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。</p>
<p><img src="/2019/10/28/Git/2.jpg" alt></p>
<p>点击 Add Key，你就应该可以看到已经添加的key。</p>
<p><img src="/2019/10/28/Git/3.jpg" alt></p>
<p>如何添加远程库？现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。</p>
<p>首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：</p>
<p><img src="/2019/10/28/Git/4.jpg" alt></p>
<p>在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p>
<p><img src="/2019/10/28/Git/5.jpg" alt></p>
<p>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>
<h2 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h2><p>在本地仓库里，输入命令行：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/boom197/boom197.github.io.git</span><br></pre></td></tr></table></figure>

<p>查看关联的仓库</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git remote -v</span></span><br></pre></td></tr></table></figure>

<h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<h2 id="拉取远程仓库"><a href="#拉取远程仓库" class="headerlink" title="拉取远程仓库"></a>拉取远程仓库</h2><p>首先还是要创建本地仓库，在本地仓库打开命令行输入：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/boom197/boom197.github.io.git</span><br></pre></td></tr></table></figure>

<p>这样就可以把远程仓库的文件下载到本地仓库里了</p>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="查看当前所在分支"><a href="#查看当前所在分支" class="headerlink" title="查看当前所在分支"></a>查看当前所在分支</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure>

<h3 id="创建本地分支并切换到新创建的分支"><a href="#创建本地分支并切换到新创建的分支" class="headerlink" title="创建本地分支并切换到新创建的分支"></a>创建本地分支并切换到新创建的分支</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git checkout -b dev   <span class="comment">--两个命令一起执行</span></span><br><span class="line">git branch dev   <span class="comment">--创建</span></span><br><span class="line">git checkout dev   <span class="comment">--切换</span></span><br></pre></td></tr></table></figure>

<h3 id="将新创建的分支信息推送到github"><a href="#将新创建的分支信息推送到github" class="headerlink" title="将新创建的分支信息推送到github"></a>将新创建的分支信息推送到github</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> HEAD -u</span><br></pre></td></tr></table></figure>

<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">merge</span> dev  <span class="comment">--指定分支合并到当前分支上</span></span><br></pre></td></tr></table></figure>

<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-d dev</span><br></pre></td></tr></table></figure>

<h3 id="推送分支到远程"><a href="#推送分支到远程" class="headerlink" title="推送分支到远程"></a>推送分支到远程</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> dev   --dev分支</span><br></pre></td></tr></table></figure>

<h3 id="拉取远程分支"><a href="#拉取远程分支" class="headerlink" title="拉取远程分支"></a>拉取远程分支</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">git</span> <span class="comment">fetch</span> <span class="comment">origin</span> <span class="comment">dev</span>    <span class="literal">-</span><span class="literal">-</span><span class="comment">dev为远程仓库的分支名</span><span class="literal">-</span><span class="literal">-</span></span><br></pre></td></tr></table></figure>

<h3 id="本地创建分支dev并切换到该分支"><a href="#本地创建分支dev并切换到该分支" class="headerlink" title="本地创建分支dev并切换到该分支"></a>本地创建分支dev并切换到该分支</h3><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">git</span> <span class="variable">checkout</span> -<span class="variable">b</span> <span class="function"><span class="title">dev</span>(本地分支名称) <span class="variable">origin</span>/<span class="title">dev</span>(远程分支名称)</span></span><br></pre></td></tr></table></figure>

<h3 id="把某个分支上的内容都拉取到本地"><a href="#把某个分支上的内容都拉取到本地" class="headerlink" title="把某个分支上的内容都拉取到本地"></a>把某个分支上的内容都拉取到本地</h3><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">git</span> <span class="variable">pull</span> <span class="variable">origin</span> <span class="function"><span class="title">dev</span>(远程分支名称)</span></span><br></pre></td></tr></table></figure>

<h3 id="强制提交"><a href="#强制提交" class="headerlink" title="强制提交"></a>强制提交</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ git push -u origin <span class="keyword">master</span> <span class="title">-f</span>    //强制提交（会覆盖原有的）</span><br></pre></td></tr></table></figure>

<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init [project-name]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git<span class="built_in"> config </span>--list</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git<span class="built_in"> config </span>-e [--global]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git<span class="built_in"> config </span>[--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git<span class="built_in"> config </span>[--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure>

<h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git <span class="builtin-name">add</span> [file1] [file2] <span class="built_in">..</span>.</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git <span class="builtin-name">add</span> [dir]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git <span class="builtin-name">add</span> .</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git <span class="builtin-name">add</span> -p</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] <span class="built_in">..</span>.</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>

<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> -m [message]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> [file1] [file2] ... -m [message]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> -a</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git <span class="keyword">commit</span> -v</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend -m [message]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>

<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到上一个分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure>

<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git <span class="keyword">tag</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> [<span class="keyword">tag</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [<span class="keyword">tag</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [<span class="keyword">tag</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [<span class="keyword">tag</span>]</span><br></pre></td></tr></table></figure>

<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，其<span class="string">"提交说明"</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示过去5次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git shortlog -sn</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure>

<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="variable">$ </span>git fetch [remote]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git remote -v</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line"><span class="variable">$ </span>git remote show [remote]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="variable">$ </span>git remote add [shortname] [url]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="variable">$ </span>git pull [remote] [branch]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] [branch]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --force</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --all</span><br></pre></td></tr></table></figure>

<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [<span class="keyword">commit</span>] [<span class="keyword">file</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">file</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">commit</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard [commit]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--keep [commit]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [<span class="keyword">commit</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<p>最后非常感谢以下链接：</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_36150631/article/details/81038485" target="_blank" rel="noopener">https://blog.csdn.net/qq_36150631/article/details/81038485</a> </p>
<p><a href="http://www.cnblogs.com/tugenhua0707/p/4050072.html" target="_blank" rel="noopener">http://www.cnblogs.com/tugenhua0707/p/4050072.html</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a> </p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2019/10/26/Spring/</url>
    <content><![CDATA[<p> Spring是一个开源框架， 它是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。 </p>
<a id="more"></a>

<div class="note danger no-icon"><p>Spring的核心是控制反转（IoC）和面向切面（AOP）</p></div>

<h1 id="Spring的优点"><a href="#Spring的优点" class="headerlink" title="Spring的优点"></a>Spring的优点</h1><p><strong>（1）方便解耦，简化开发（高内聚低耦合）</strong></p>
<p>​    Spring就是一个大工厂（容器），可以将所有对象创建和依赖关系维护，交给Spring管理。</p>
<p>​    Spring工厂是用于生产Bean</p>
<p><strong>（2）AOP编程的之支持</strong></p>
<p>​    Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能</p>
<p><strong>（3）声明式事务的支持</strong> </p>
<p>​    只需要通过配置就可以完成对事务的管理，而无需手动编程</p>
<p><strong>（4）方便程序的测试</strong></p>
<p>​    Spring对Junit4支持，可以通过注解方便的测试Spring程序</p>
<p><strong>（5）方便集成各种优秀的框架</strong></p>
<p>​    Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz等）的直接支持</p>
<p><strong>（6）降低JavaEE API的使用难度</strong> </p>
<p>​    Spring 对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低</p>
<h1 id="如何实现简化java开发的目标"><a href="#如何实现简化java开发的目标" class="headerlink" title="如何实现简化java开发的目标?"></a><strong>如何实现简化java开发的目标?</strong></h1><p>为了降低java开发的复杂性，spring主要采取以下4种关键策略：</p>
<ul>
<li>基于POJO的轻量级和最小侵入性编程。</li>
<li>通过依赖注入和面向接口编程实现松耦合。</li>
<li>基于切面和惯例进行声明式编程。</li>
<li>通过切面和模版减少样式代码。</li>
</ul>
<h1 id="使用Spring的好处？"><a href="#使用Spring的好处？" class="headerlink" title="使用Spring的好处？"></a>使用Spring的好处？</h1><ul>
<li><strong>轻量：</strong>Spring 是轻量的，基本的版本大约2MB。</li>
<li><strong>控制反转：</strong>Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。</li>
<li><strong>面向切面的编程(AOP)：</strong>Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开，并使系统服务模块化。</li>
<li><strong>容器：</strong>Spring 包含并管理应用中对象的生命周期和配置。</li>
<li><strong>MVC框架</strong>：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品。</li>
<li><strong>事务管理：</strong>Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。</li>
<li><strong>异常处理：</strong>Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常。</li>
<li><strong>提供模版</strong>：减少了样板式代码</li>
</ul>
<h1 id="Spring由哪些模块组成"><a href="#Spring由哪些模块组成" class="headerlink" title="Spring由哪些模块组成?"></a><strong>Spring由哪些模块组成</strong>?</h1><p>Spring Core：核心类库，提供IOC服务；</p>
<p>Spring Context：提供框架式的Bean访问方式，以及企业级功能（JNDI、定时任务等）；</p>
<p>Spring AOP：AOP服务；</p>
<p>Spring DAO：对JDBC的抽象，简化了数据访问异常的处理；</p>
<p>Spring ORM：对现有的ORM框架的支持；</p>
<p>Spring Web：提供了基本的面向Web的综合特性，例如多方文件上传；</p>
<p>Spring MVC：提供面向Web应用的Model-View-Controller实现。</p>
<h2 id="常用的几个应用上下文"><a href="#常用的几个应用上下文" class="headerlink" title="常用的几个应用上下文"></a>常用的几个应用上下文</h2><ul>
<li>ClassPathXmlApplicationContext:从类路径下的xml配置文件中加载上下文定义.</li>
<li>FileSystemXmlApplicationContext:读取文件系统下xml配置文件并加载</li>
<li>XmlＷebApplicationContext:读取Web应用下的Xml配置文件并加载上下文定义</li>
</ul>
<h1 id="Spring思想"><a href="#Spring思想" class="headerlink" title="Spring思想"></a><strong>Spring思想</strong></h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>IOC就是<strong>控制反转</strong>，是指创建对象的控制权的转移，以前创建对象的主动权和时机是由自己把控的，而现在这种权力转移到Spring容器中，并由容器根据配置文件去创建实例和管理各个实例之间的依赖关系，对象与对象之间松散耦合，也利于功能的复用。DI依赖注入，和控制反转是同一个概念的不同角度的描述，即应用程序在运行时依赖IoC容器来动态注入对象需要的外部资源。</p>
<p>最直观的表达就是，IOC让对象的创建不用去new了，可以由spring自动生产，使用java的反射机制，根据配置文件在运行时动态的去创建对象以及管理对象，并调用对象的方法的。</p>
<p>Spring的IOC有三种注入方式 ：构造器注入、setter方法注入、根据注解注入。</p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>OOP面向对象，允许开发者定义纵向的关系，但并适用于定义横向的关系，导致了大量代码的重复，而不利于各个模块的重用。</p>
<p>AOP，一般称为<strong>面向切面</strong>，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理。</p>
<h3 id="通知（Advice-："><a href="#通知（Advice-：" class="headerlink" title="通知（Advice)："></a>通知（Advice)：</h3><p> 切面的工作被称为通知。通知定义了切面是什么及何时使用。</p>
<p>许多AOP框架（包括Spring）都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。</p>
<p>Spring切面可以应用5种类型的通知：</p>
<p>​    前置通知（Before）：在目标方法被调用之前调用通知功能；</p>
<p>​    后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；</p>
<p>​    返回通知（After-returning）：在目标方法成功执行之后调用通知；</p>
<p>​    异常通知（After-throwing）：在目标方法抛出异常后调用通知；</p>
<p>​    环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。</p>
<p>对应注解：</p>
<ul>
<li>@After        通知方法会在目标方法返回或抛出异常后调用</li>
<li>@AfterReturning        通知方法会在目标方法返回后调用</li>
<li>@AfterThrowing        通知方法会在目标方法抛出异常后调用</li>
<li>@Around        通知方法会将目标方法封装起来</li>
<li>@Before        通知方法会在目标方法调用之前执行</li>
</ul>
<h3 id="连接点（Join-point）"><a href="#连接点（Join-point）" class="headerlink" title="连接点（Join point）"></a>连接点（Join point）</h3><p>连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法时、抛出异常时、甚至修改一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。</p>
<h3 id="切点（Pointcut）"><a href="#切点（Pointcut）" class="headerlink" title="切点（Pointcut）"></a>切点（Pointcut）</h3><p>如果说通知定义了切面的“什么”和“何时”的话，那么切点就定义了“何处” 。切点的定义会匹配通知所要织入的一个或多个连接点。我们通常使用明确的类和方法名称，或是利用正则表达式定义所匹配的类和方法名称来指定这些切点。有些AOP框架允许我们创建动态的切点，可以根据运行时的决策（比如方法的参数值）来决定是否应用通知。</p>
<h3 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h3><p>通知+切点=切面</p>
<h3 id="引入（Introduction）"><a href="#引入（Introduction）" class="headerlink" title="引入（Introduction）"></a>引入（Introduction）</h3><p>引入允许我们向现有的类添加新方法或属性</p>
<h3 id="织入（Weaving）"><a href="#织入（Weaving）" class="headerlink" title="织入（Weaving）"></a>织入（Weaving）</h3><p>织入是把切面应用到目标对象并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期里有多个点可以进行织入：</p>
<p>编译期：切面在目标类编译时被织入。这种方式需要特殊的编译器。AspectJ的织入编译器就是以这种方式织入切面的。</p>
<p>类加载期：切面在目标类加载到JVM时被织入。这种方式需要特殊的类加载器（ClassLoader），它可以在目标类被引入应用之前增强该目标类的字节码。AspectJ 5的加载时织入（load-time weaving，LTW）就支持以这种方式织入切面。</p>
<p>运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。Spring AOP就是以这种方式织入切面的。</p>
<h3 id="Spring对AOP的支持"><a href="#Spring对AOP的支持" class="headerlink" title="Spring对AOP的支持"></a>Spring对AOP的支持</h3><ol>
<li>基于代理的经典Spring AOP；</li>
<li>纯POJO切面（4.x版本需要XML配置）；</li>
<li>@AspectJ注解驱动的切面；</li>
<li>注入式AspectJ切面（适用于Spring各版本）。</li>
</ol>
<h1 id="Spring容器"><a href="#Spring容器" class="headerlink" title="Spring容器"></a>Spring容器</h1><p>BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。其中ApplicationContext是BeanFactory的子接口。</p>
<h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>是Spring里面最底层的接口，包含了各种Bean的定义，读取bean配置文档，管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系。</p>
<p>BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。这样，我们就不能发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常。</p>
<h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能：</p>
<ul>
<li>继承MessageSource，因此支持国际化。</li>
<li>统一的资源文件访问方式。</li>
<li>提供在监听器中注册bean的事件。</li>
<li>同时加载多个配置文件。</li>
<li>载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。</li>
</ul>
<p>ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。 ApplicationContext启动后预载入所有的单实例Bean，通过预载入单实例bean ,确保当你需要的时候，你就不用等待，因为它们已经创建好了。</p>
<h1 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h1><p> 基于Spring的应用中，，应用对象生存于Spring容器中。Spring容器负责创建对象，装配对象，配置他们并管理他们的整个生命周期，从new到finalize()。</p>
<p> bean可以通过@Component(“beanName”)或@Named(“beanName”)来命名。其中@Named是Java依赖注入规范中提供的。</p>
<p>Spring容器不只有一个，Spring自带了多个容器实现，可以归为两种不同类型：</p>
<p>​    –bean工厂：最简单的容器，提供基本DI支持；</p>
<p>​    –应用上下文：基于BeanFactory构建，并提供应用框架级别的服务。（应用较多）</p>
<p>​    BeanFactory是一个工厂类，用于管理Bean的一个工厂。BeanFactory是IOC容器的核心接口，负责实例化，定位，配置应用程序中的对象及建立这些对象间的依赖。</p>
<p>​    FactoryBean是实现了FactoryBean<T>接口的Bean。根据该Bean的ID从BeanFactory中获取的实际上是FactoryBean的getObject()返回的对象，而不是FactoryBean本身，若要获取FactoryBean本身需要在id前面加一个&amp;符号。</T></p>
<h2 id="自动扫描组件"><a href="#自动扫描组件" class="headerlink" title="自动扫描组件"></a><strong>自动扫描组件</strong></h2><p>@Controller控制器：注入服务</p>
<p>@Service服务：注入Dao</p>
<p>@Repository Dao：实现Dao访问</p>
<p>@Component：把普通的POJO实例化到Spring容器中，相当于配置文件中的<bean id class></bean></p>
<p>@Controller，@Service，@Repository，@Component注解的类，并把这些类纳入进Spring容器中进行管理。</p>
<p> 引入Component的扫描组件：</p>
<p> 其中base-package是需要扫描的包（含所有子包）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.best"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>   可以使用@Configuration替代xml配置，@ComponentScan(basePackages={“”,””})指定扫描组件的包及子包下带有@Component注解的类。@ComponentScan默认扫描所在类的包及子包。</p>
<ul>
<li><strong>@Controller：用于标注控制层组件</strong></li>
<li><strong>@Service：用于标注业务层组件</strong></li>
<li><strong>@Repository：用于标注数据访问层组件，即DAO组件</strong></li>
<li><strong>@Component：泛指组件，当组件不好归类时，可使用该注解进行标注。</strong></li>
<li><strong>@Controller，@Service，@Repository，@Component注解的类，并把这些类纳入进Spring容器中进行管理。</strong></li>
</ul>
<h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p>  <strong>@Autowired可以用在构造方法和类的方法上。spring会满足方法参数上所声明的依赖。</strong></p>
<p>  – 如果没有匹配的bean：在应用上下文创建的时候，Spring会抛出异常，为避免异常可以使用@Autowired(required=false)</p>
<p>   – 有匹配的bean时：若使用了@Autowired(required=false)，在代码没有进行null检查时，这个处于未装配状态的属性可能会抛出NullPointException。</p>
<p> @Inject也可以完成自动装配，是Java依赖注入规范中提供的。</p>
<p> 使用自动装配让Spring完全负责将bean引用注入到构造参数和属性中，能够减少装配应用程序组件时所需的显示配置的数量。如果有多个bean能够匹配结果时Spring会抛出NoUniqueBeanDefinitionException。此时可以将可选bean中的某一个设为首选(@Primary，Primary与@Component或@Bean一起使用)的bean 或使用限定符(@Qualifier(“xxxbeanName”)，Qualifier与@Autowired一起使用)来帮助Spring将可选的bean范围缩小到只有一个bean。Qualifier也可以与@Component或@Bean一起使用，为某一个bean设置beanName即创建自定义的限定符，以防止bean类名修改导致找不到Qualifier指定beanName。</p>
<h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a><strong>bean的作用域</strong></h2><p>  默认情况下，Spring应用上下文中所有bean都是作为一单例(singleton)的形式创建的。即不管给定的一个bean被注入到其他bean多少次，每次所注入的都是同一个实例。</p>
<p>当所使用的类是异变的(mutable)，他们会保持一些状态，此时重用是不安全的。</p>
<p>Spring定义了多种作用域，可以基于这些作用域创建bean：</p>
<p>​    – 单例（Singleton）：在整个应用中，只创建bean的一个实例；</p>
<p>​    – 原型（Prototype）：每次注入或通过Spring应用上下文获取的时候，都会创建一个bean实例；</p>
<p>​    – 会话（Session）：在Web应用中，为每个会话创建一个bean实例；</p>
<p>​    – 请求（Request）：在Web应用中，为每个请求创建一个bean实例。</p>
<p>单例是默认作用域，如果要选择其他作用域，要使用@Scope注解，与@Component或@Bean一起使用：</p>
<p>​    – 原型：@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)或@Scope(“prototype”)</p>
<p>​    – 会话：@Scope(value=WebApplicationContext.SCOPE_SESSION, proxyMode=ScopedProxyMode.INTERFACES)</p>
<p>​    – 请求：@Scope(value=WebApplicationContext.SCOPE_REQUEST, proxyMode=ScopedProxyMode.INTERFACES)</p>
<p>  当一个会话或者请求作用域的bean（BeanSession）要注入到单例作用域的bean（BeanSingle）中时，会出现一些问题：</p>
<p>​    – BeanSingle在Spring应用上下文加载的时候创建，此时Spring会试图将BeanSession注入到BeanSingle中，而此时BeanSession还不存在（当有用户进入系统，创建会话后才会被创建）。</p>
<p>​    – 系统中可能会存在多个BeanSession，大多数情况下我们不希望注入一个固定的BeanSession到BeanSingle中，而是当前Session中的那个。</p>
<p>​    为了解决这个问题，Spring不会将实际的BeanSession注入到BeanSingle中去，而是注入一个BeanSession的代理。这个代理会暴露出和BeanSession相同的方法，BeanSingle会认为它是一个普通的BeanSession。</p>
<h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p>（1）实例化Bean：</p>
<p>对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。对于ApplicationContext容器，当容器启动结束后，通过获取BeanDefinition对象中的信息，实例化所有的bean。</p>
<p>（2）设置对象属性（依赖注入）：</p>
<p>实例化后的对象被封装在BeanWrapper对象中，紧接着，Spring根据BeanDefinition中的信息 以及 通过BeanWrapper提供的设置属性的接口完成依赖注入。</p>
<p>（3）处理Aware接口：</p>
<p>接着，Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给Bean：</p>
<p>①如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的就是Spring配置文件中Bean的id值；</p>
<p>②如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()方法，传递的是Spring工厂自身。</p>
<p>③如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文；</p>
<p>（4）BeanPostProcessor：</p>
<p>如果想对Bean进行一些自定义的处理，那么可以让Bean实现了BeanPostProcessor接口，那将会调用postProcessBeforeInitialization(Object obj, String s)方法。由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术；</p>
<p>（5）InitializingBean 与 init-method：</p>
<p>如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。</p>
<p>（6）如果这个Bean实现了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法；</p>
<p>以上几个步骤完成后，Bean就已经被正确创建了，之后就可以使用这个Bean了。</p>
<p>（7）DisposableBean：</p>
<p>当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；</p>
<p>（8）destroy-method：</p>
<p>最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。</p>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">  	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string"> 	 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Component"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Repository"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 加载配数据源配置文件 db.properties --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:config/db.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置 C3P0 数据源 --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.driver_class&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.url&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.username&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.password&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.minPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--连接池中保留的最大连接数。Default: 15 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.maxPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.maxIdleTime&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.acquireIncrement&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。</span></span><br><span class="line"><span class="comment">            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.maxStatements&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span></span></span><br><span class="line"><span class="tag">				  <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.maxStatementsPerConnection&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.initialPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--每60秒检查所有连接池中的空闲连接。Default: 0 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span></span></span><br><span class="line"><span class="tag">				  <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.idleConnectionTestPeriod&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span></span></span><br><span class="line"><span class="tag">				  <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.acquireRetryAttempts&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试</span></span><br><span class="line"><span class="comment">            获取连接失败后该数据源将申明已断开并永久关闭。Default: false --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"breakAfterAcquireFailure"</span></span></span><br><span class="line"><span class="tag">				  <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.breakAfterAcquireFailure&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable</span></span><br><span class="line"><span class="comment">            等方法来提升连接测试的性能。Default: false --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span></span></span><br><span class="line"><span class="tag">				  <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.testConnectionOnCheckout&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.checkoutTimeout&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckin"</span></span></span><br><span class="line"><span class="tag">				  <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.testConnectionOnCheckin&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"automaticTestTable"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.automaticTestTable&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryDelay"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.acquireRetryDelay&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--自动超时回收Connection--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unreturnedConnectionTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.unreturnedConnectionTimeout&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--超时自动断开--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTimeExcessConnections"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.maxIdleTimeExcessConnections&#125;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxConnectionAge"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.connection.maxConnectionAge&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 事务管理器 （JDBC） --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 启动声明式事务驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- spring 通过 sqlSessionFactoryBean 获取 sqlSessionFactory 工厂类 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 扫描 po 包，使用别名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 扫描映射文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:config/mybatis/mapper/admin/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置扫描 dao 包，动态实现 dao 接口，注入到 spring 容器中 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.dao"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注意使用 sqlSessionFactoryBeanName 避免出现spring 扫描组件失效问题 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"gson"</span> <span class="attr">class</span>=<span class="string">"com.google.gson.Gson"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2019/10/25/Markdown/</url>
    <content><![CDATA[<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里<a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">基础的语法</a>就不提了，点进来的应该都会了，这里就讲讲一些技巧。</p>
<p>我用的 Markdown 编辑器是 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>，有些行内公式的显示可以在设置里打开。这是我用过的最好的 Markdown编辑器。</p>
<h1 id="分隔线和空行"><a href="#分隔线和空行" class="headerlink" title="分隔线和空行"></a>分隔线和空行</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">这是文字</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">上面是分隔线</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">上面是空行</span><br><span class="line"></span><br><span class="line">分割线：</span><br><span class="line">方法一：---</span><br><span class="line">方法二：+++</span><br><span class="line">方法三：***</span><br></pre></td></tr></table></figure>

<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>引用内容<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果前后间隙很小，可以像下面这样写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>引用内容<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="居中和右对齐"><a href="#居中和右对齐" class="headerlink" title="居中和右对齐"></a>居中和右对齐</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 居中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 右对齐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:right"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="字体大小和颜色"><a href="#字体大小和颜色" class="headerlink" title="字体大小和颜色"></a>字体大小和颜色</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#187892"</span> <span class="attr">size</span>=<span class="string">"number"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 详细请查看 http://www.w3school.com.cn/tags/tag_font.asp --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Todo-list"><a href="#Todo-list" class="headerlink" title="Todo list"></a>Todo list</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li><i class="fa fa-check-square"></i>已完成</li>
<li><i class="fa fa-square"></i>未完成</li>
</ul>

<h1 id="Note嵌套Todo-list"><a href="#Note嵌套Todo-list" class="headerlink" title="Note嵌套Todo list"></a>Note嵌套Todo list</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一共有两种写法，效果看下面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="note primary">
  <i class="fa fa-check-square"></i> 已完成
  <i class="fa fa-check-square"></i> 已完成
  <i class="fa fa-check-square"></i> 已完成
  <i class="fa fa-check-square"></i> 已完成
  <i class="fa fa-check-square"></i> 已完成
  <i class="fa fa-square"></i> 未完成
  <i class="fa fa-square"></i> 未完成
  <i class="fa fa-square"></i> 未完成
</div>
<div class="note primary">
  <p>
    <i class="fa fa-check-square"></i> 已完成
    <i class="fa fa-check-square"></i> 已完成
    <i class="fa fa-check-square"></i> 已完成
    <i class="fa fa-square"></i> 未完成
    <i class="fa fa-square"></i> 未完成
    <i class="fa fa-square"></i> 未完成
  </p>
</div>

<p>这两个写法熟悉 HTML 的同学应该是明白的，这里因为我太菜了就不讲了。主要说一下 <i class="fa fa-square"></i> 是从 Font Awesome 上获取图标的方法，不过有些图标似乎是不能加载的，我也不知道为什么。</p>
<h1 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h1><p>Font Awesome 更多的使用可以看<a href="https://fontawesome.com/how-to-use/on-the-web/setup/getting-started?using=web-fonts-with-css" target="_blank" rel="noopener">官网示例</a>，这里讲一个放大图标的方法 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-download"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 普通</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-download fa-lg"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 变大 <span class="number">33</span>%</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-download fa-2x"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 两倍大</span><br></pre></td></tr></table></figure>

<h1 id="Note-标签"><a href="#Note-标签" class="headerlink" title="Note 标签"></a>Note 标签</h1><p>​     在主题配置文件_config.yml里有一个关于这个的配置: </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Note tag (bs-callout).</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># 风格</span></span><br><span class="line"><span class="attr">  style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="comment"># 要不要图标</span></span><br><span class="line"><span class="attr">  icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 圆角矩形</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>用 HTML 写就是这个样子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note default"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>default<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note success"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>success<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note info"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>info<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note warning"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>warning<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger no-icon"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger no-icon<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 用 swig 语法写就是这样 </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;% note [<span class="class"><span class="keyword">class</span>] %&#125;</span></span><br><span class="line"><span class="class"><span class="title">Any</span> <span class="title">content</span> (<span class="title">support</span> <span class="title">inline</span> <span class="title">tags</span> <span class="title">too</span>).</span></span><br><span class="line"><span class="class"></span>&#123;% endnote %&#125;</span><br><span class="line">[<span class="class"><span class="keyword">class</span>] : <span class="title">default</span> | <span class="title">primary</span> | <span class="title">success</span> | <span class="title">info</span> | <span class="title">warning</span> | <span class="title">danger</span>.</span></span><br><span class="line"><span class="class">          <span class="title">May</span> <span class="title">be</span> <span class="title">not</span> <span class="title">defined</span>.</span></span><br></pre></td></tr></table></figure>

<p>里面的三种风格长啥样？开启图标长啥样？可以查看<a href="https://github.com/iissnan/hexo-theme-next/pull/1697" target="_blank" rel="noopener">这个页面</a>，更多的介绍也在这个页面，请自行查看</p>
<h1 id="Label-标签"><a href="#Label-标签" class="headerlink" title="Label 标签"></a>Label 标签</h1><p> <code>label</code> 标签不建议加在段首, 首先可以在主题配置文件中有配置： </p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Label tag.</span></span><br><span class="line"><span class="keyword">label</span><span class="bash">: <span class="literal">true</span></span></span><br></pre></td></tr></table></figure>

<p>代码图如下</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-variable">&#123;% label <span class="keyword">default</span>@<span class="keyword">default</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>

<p> 然后效果如下（<code>@</code>前面的是label的名字，后面的是要显示的文字） </p>
<span class="label default">default</span>

<p>有以下几种：</p>
<ul>
<li>primary </li>
<li>success </li>
<li>info </li>
<li>warning </li>
<li>danger </li>
</ul>
<h1 id="Tab-选项卡"><a href="#Tab-选项卡" class="headerlink" title="Tab 选项卡"></a>Tab 选项卡</h1><p> 当然也是要先配置一下： </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tabs tag.</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  transition:</span></span><br><span class="line"><span class="attr">    tabs:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    labels:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p> 代码如下： </p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">tabs</span> 选项卡, 2 %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab --&gt;</span></span></span><br><span class="line"><span class="xml">**这是选项卡 1** 呵呵哈哈哈哈哈哈</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab --&gt;</span></span></span><br><span class="line"><span class="xml">**这是选项卡 2** 额。。。</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab --&gt;</span></span></span><br><span class="line"><span class="xml">**这是选项卡 3** 哇，你找到我了！</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>

<p> 效果如下： </p>
<div class="tabs" id="选项卡"><ul class="nav-tabs"><li class="tab"><a href="#选项卡-1">选项卡 1</a></li><li class="tab active"><a href="#选项卡-2">选项卡 2</a></li><li class="tab"><a href="#选项卡-3">选项卡 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项卡-1"><p><strong>这是选项卡 1</strong> 呵呵哈哈哈哈哈哈</p>
</div><div class="tab-pane active" id="选项卡-2"><p><strong>这是选项卡 2</strong> 额。。。</p>
</div><div class="tab-pane" id="选项卡-3"><p><strong>这是选项卡 3</strong> 哇，你找到我了！</p>
</div></div></div>

<p> 上面源码中，2 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。 </p>
<h1 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h1><p> 代码如下： </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&#123;% btn http<span class="variable">s:</span>//almostover.<span class="keyword">ru</span>/<span class="number">2016</span>-<span class="number">01</span>/hexo-theme-<span class="keyword">next</span>-test/#Button-<span class="keyword">tag</span>-test, 更多关于按钮的使用点这里, download fa-<span class="keyword">lg</span> fa-fw %&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>最后文章出处来于<a href="https://walesexcitedmei.github.io/" target="_blank" rel="noopener">梅骏逸的博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/21/hello-world/</url>
    <content><![CDATA[<p>这是我博客的第一篇文章，记录搭建博客的过程。。。</p>
<a id="more"></a>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 是高效的静态站点生成框架，她基于 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">标签插件</a> 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>GitHub账号</li>
<li>安装node.js、npm</li>
<li>安装git for windows</li>
</ul>
<h1 id="使用Hexo写博客"><a href="#使用Hexo写博客" class="headerlink" title="使用Hexo写博客"></a>使用Hexo写博客</h1><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p>
<p>官网： <a href="http://hexo.io/" target="_blank" rel="noopener">http://hexo.io</a>    github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</li>
<li>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</li>
<li>hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的；</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在你电脑桌面右键鼠标，选择Git Bash Here</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> -g hexo</span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\Workspaces\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /f/Workspaces/hexo/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br></pre></td></tr></table></figure>

<p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p>
<img src="/2019/10/21/hello-world/1.png" class title="This is an example image">

<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g <span class="comment"># 生成</span></span><br><span class="line"><span class="variable">$ </span>hexo s <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure>

<p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p>
<img src="/2019/10/21/hello-world/2.png" class title="This is an example image">

<p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：<a href="http://blog.liuxianan.com/windows-port-bind.html" target="_blank" rel="noopener">http://blog.liuxianan.com/windows-port-bind.html</a></p>
<h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>。</p>
<p>个人比较喜欢的主题：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a>。</p>
<p>首先下载这个主题：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ cd <span class="regexp">/f/</span>Workspaces<span class="regexp">/hexo/</span></span><br><span class="line">$ git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/litten/</span>hexo-theme-yilia.git themes<span class="regexp">/yilia</span></span><br></pre></td></tr></table></figure>

<p>下载后的主题都在Themes文件夹里</p>
<p>修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。</p>
<p>如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。</p>
<h2 id="主题目录详解"><a href="#主题目录详解" class="headerlink" title="主题目录详解"></a>主题目录详解</h2><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">├── .github            <span class="comment">#git信息</span></span><br><span class="line">├── languages          <span class="comment">#多语言</span></span><br><span class="line">|<span class="string">   ├── default.yml    #默认语言</span></span><br><span class="line">|<span class="string">   └── zh-Hans.yml      #简体中文</span></span><br><span class="line">|<span class="string">   └── zh-tw.yml      #繁体中文</span></span><br><span class="line"><span class="string">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span></span><br><span class="line">|<span class="string">   ├── _custom        #可以自己修改的模板，覆盖原有模板</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   ├── _header.swig    #头部样式</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   ├── _sidebar.swig   #侧边栏样式</span></span><br><span class="line">|<span class="string">   ├── _macro        #可以自己修改的模板，覆盖原有模板</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   ├── post.swig    #文章模板</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   ├── reward.swig    #打赏模板</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   ├── sidebar.swig   #侧边栏模板</span></span><br><span class="line">|<span class="string">   ├── _partial       #局部的布局</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   ├── head       #头部模板</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   ├── search     #搜索模板</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   ├── share      #分享模板</span></span><br><span class="line">|<span class="string">   ├── _script        #局部的布局</span></span><br><span class="line">|<span class="string">   ├── _third-party   #第三方模板</span></span><br><span class="line">|<span class="string">   ├── _layout.swig   #主页面模板</span></span><br><span class="line">|<span class="string">   ├── index.swig     #主页面模板</span></span><br><span class="line">|<span class="string">   ├── page           #页面模板</span></span><br><span class="line">|<span class="string">   └── tag.swig       #tag模板</span></span><br><span class="line"><span class="string">├── scripts            #script源码</span></span><br><span class="line">|<span class="string">   ├── tags           #tags的script源码</span></span><br><span class="line">|<span class="string">   ├── marge.js       #页面模板</span></span><br><span class="line"><span class="string">├── source             #源码</span></span><br><span class="line">|<span class="string">   ├── css            #css源码</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   ├── _common    #*.styl基础css</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   ├── _custom    #*.styl局部css</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   └── _mixins    #mixins的css</span></span><br><span class="line">|<span class="string">   ├── fonts          #字体</span></span><br><span class="line">|<span class="string">   ├── images         #图片</span></span><br><span class="line">|<span class="string">   ├── uploads        #添加的文件</span></span><br><span class="line">|<span class="string">   └── js             #javascript源代码</span></span><br><span class="line"><span class="string">├── _config.yml        #主题配置文件</span></span><br><span class="line"><span class="string">└── README.md          #用GitHub的都知道</span></span><br></pre></td></tr></table></figure>

<h2 id="上传之前"><a href="#上传之前" class="headerlink" title="上传之前"></a>上传之前</h2><p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p>
<h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h2><p>如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。</p>
<p>首先，ssh key肯定要配置好。</p>
<p>其次，配置_config.yml中有关deploy的部分：</p>
<p>正确写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:liuxianan/liuxianan.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>如果报错：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Deployer <span class="keyword">not</span> <span class="built_in">found</span>: github 或者 Deployer <span class="keyword">not</span> <span class="built_in">found</span>: git</span><br></pre></td></tr></table></figure>

<p>需要安装插件：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<h2 id="常用的Hexo命令"><a href="#常用的Hexo命令" class="headerlink" title="常用的Hexo命令"></a>常用的Hexo命令</h2><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="meta">#新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="meta">#新建页面</span></span><br><span class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></span><br><span class="line">hexo <span class="keyword">server</span> <span class="meta">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="meta">#部署到GitHub</span></span><br><span class="line">hexo help  <span class="meta"># 查看帮助</span></span><br><span class="line">hexo version  <span class="meta">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>

<p>缩写：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

<p>组合命令：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure>

<h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。</p>
<p>在Hexo目录下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ hexo new<span class="built_in"> page </span>tags</span><br></pre></td></tr></table></figure>

<p>此时会在你的source目录下创建出tags目录，该目录下会有index.md文件，编辑此文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-10</span><span class="bullet">-24</span> <span class="number">11</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span>      <span class="comment">#如果有集成评论服务，页面会有评论，关闭则设置为false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>然后修改菜单，在<strong>主题配置文件</strong>，添加tags到menu中，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure>

<p>请参阅 <a href="https://hexo.io/zh-cn/docs/front-matter.html#分类和标签" target="_blank" rel="noopener">Hexo 的分类与标签文档</a>，了解如何为文章添加标签或者分类。</p>
<h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><p>新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。</p>
<p>在Hexo目录下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ hexo new<span class="built_in"> page </span>categories</span><br></pre></td></tr></table></figure>

<p>此时会在你的source目录下创建出categories目录，该目录下会有index.md文件，编辑此文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-10</span><span class="bullet">-24</span> <span class="number">11</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span>      <span class="comment">#如果有集成评论服务，页面会有评论，关闭则设置为false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>然后修改菜单，在<strong>主题配置文件</strong>，添加categories到menu中，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories</span></span><br></pre></td></tr></table></figure>

<h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>定位到我们的hexo根目录，执行命令：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">'my-first-blog'</span></span><br></pre></td></tr></table></figure>

<p>hexo会帮我们在_posts下生成相关md文件：</p>
<p>完整格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">postName</span> <span class="comment">#文章页面上的显示名称，一般是中文</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="bullet">-12</span><span class="bullet">-02</span> <span class="number">15</span><span class="string">:30:16</span> <span class="comment">#文章生成时间，一般不改，当然也可以任意修改</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">默认分类</span> <span class="comment">#分类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[tag1,tag2,tag3]</span> <span class="comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是<strong>hexo-asset-image</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">npm install https:<span class="regexp">//gi</span>thub.com<span class="regexp">/CodeFalling/</span>hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>但是这个插件的内容需要修改【不然可能会出Bug】</p>
<p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">			  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">			  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>打开_config.yml文件，修改下述内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>Hexo 提供了一种更方便管理 Asset 的设定：post_asset_folder当您设置post_asset_folder为true参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹。</p>
<p>在需要图片的地方插入代码：example.jpg为图片名称</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">&#123;<span class="symbol">%</span> asset_img <span class="built_in">example</span>.jpg This <span class="built_in">is</span> an <span class="built_in">example</span> <span class="built_in">image</span> <span class="symbol">%</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文章连接文本样式"><a href="#文章连接文本样式" class="headerlink" title="文章连接文本样式"></a>文章连接文本样式</h2><p>打开文件 <code>themes/next/source/css/_common/components/post/post.styl</code>，在末尾添加</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p>
<h2 id="文章字体的颜色、大小、居中"><a href="#文章字体的颜色、大小、居中" class="headerlink" title="文章字体的颜色、大小、居中"></a>文章字体的颜色、大小、居中</h2><p>如果想设置某一句的颜色或大小，只需用html语法写出来就行了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">接下来就是见证奇迹的时刻</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#FF0000"</span>&gt;</span> 我可以设置这一句的颜色哈哈 <span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span> 我还可以设置这一句的大小嘻嘻 <span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span> <span class="attr">color</span>=<span class="string">"#FF0000"</span>&gt;</span> 我甚至可以设置这一句的颜色和大小呵呵<span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>这一行需要居中<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="站点访问计数"><a href="#站点访问计数" class="headerlink" title="站点访问计数"></a>站点访问计数</h2><p>站点访问计数有名的就是<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fbusuanzi.ibruce.info" target="_blank" rel="noopener">不蒜子</a>，使用起来非常方便</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">           &lt;span id=<span class="string">"busuanzi_container_site_pv"</span>&gt;本站总访问量&lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>次&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开 <strong>themes/next/layout/_partial/footer.swig</strong>，将下面这段代码添加到里面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;span id=<span class="string">"busuanzi_container_site_pv"</span> style=<span class="string">'display:none'</span>&gt;</span><br><span class="line">    本站总访问量 &lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> 次</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-divider"</span>&gt;|<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;span id="busuanzi_container_site_uv" style='display:none'&gt;</span></span><br><span class="line"><span class="regexp">    有&lt;span id="busuanzi_value_site_uv"&gt;&lt;/</span>span&gt;人看过我的博客啦</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>

<p>添加的位置如下图，可自行根据个人喜好更换位置：</p>


<p>以上只是显示站点的访问次数，如果想想显示每篇文章的访问次数，打开<strong>themes/next/layout/_macro/post.swig</strong>，在第一行增加is_pv字段</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;% macro render(post, is_index, is_pv, post_extra_class) %&#125;</span><br></pre></td></tr></table></figure>

<p>然后将这段代码插入到里面：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> is_pv %&#125;</span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span>="<span class="title">post</span>-<span class="title">meta</span>-<span class="title">divider</span>"&gt;|&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">span</span> <span class="title">id</span>="<span class="title">busuanzi_value_page_pv</span>"&gt;&lt;/<span class="title">span</span>&gt;次阅读</span></span><br><span class="line"><span class="class"></span>&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<img src="/2019/10/21/hello-world/4.png" class title="This is an example image">

<p>最后再打开 <strong>themes/next/layout/index.swig</strong>，这个文件是首页的模板，给render方法传入参数（对应刚才添加的is_pv字段）</p>
<img src="/2019/10/21/hello-world/5.png" class title="This is an example image">

<p>OK！设置完毕。</p>
<h2 id="去掉文章目录标题的自动编号"><a href="#去掉文章目录标题的自动编号" class="headerlink" title="去掉文章目录标题的自动编号"></a>去掉文章目录标题的自动编号</h2><p>我们自己写文章的时候一般都会自己带上标题编号，但是默认的主题会给我们带上编号，很是别扭，如何去掉呢？<br>打开<strong>主题配置文件</strong>，找到<strong>toc</strong>字段，将<strong>number</strong>改为<strong>false</strong>即可</p>
<h2 id="文章字数统计、阅读时长"><a href="#文章字数统计、阅读时长" class="headerlink" title="文章字数统计、阅读时长"></a>文章字数统计、阅读时长</h2><p>Hexo 提供了 <code>hexo-wordcount</code> 插件，新版本的 next 中集成了这一点，只需要安装插件然后开启功能就 ok。</p>
<p>第一步：安装 word_count 插件，在博客根目录下打开终端：<code>npm install hexo-wordcount --save</code></p>
<p>第二步：在主题配置文件 <code>Blog\themes\next\config.yml</code> 中打开 post_wordcount 统计功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span> <span class="comment"># 单篇 字数统计</span></span><br><span class="line"><span class="attr">  min2read:</span> <span class="literal">true</span> <span class="comment"># 单篇 阅读时长</span></span><br><span class="line"><span class="attr">  totalcount:</span> <span class="literal">false</span> <span class="comment"># 网站 字数统计</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>如果仅仅只是打开 wordcount、min2read，部署之后会发现文章的【字数统计】和【阅读时长】后面没有对应的 xxx 字，xx 分钟等字样，只有光秃秃的数字在那里。</p>
<p>解决方案：找到 \themes\next\layout\_macro\post.swig 文件，将“字”、“分钟” 字样添加到如下位置即可。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">     &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span><br><span class="line">     &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>然后才可以看到显示：<code>阅读时长 ≈ 2 分钟</code>，但若是不需要显示 <code>≈</code> ，就修改这个地方：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.post_wordcount.item_text %&#125;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span>="<span class="title">post</span>-<span class="title">meta</span>-<span class="title">item</span>-<span class="title">text</span>"&gt;</span>&#123;&#123; <span class="number">__</span>('post.min2read') &#125;&#125; &amp;asymp;&lt;/span&gt;</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>把这里的<code>&amp;asymp;</code>删除即可。</p>
<p><strong>注</strong>：如果想要在文章中使用，可以这样插入 <code>&lt;i class=&quot;fa fa-smile-o&quot; style=&quot;font-size:28px;color:#FF8247;&quot;&gt;&lt;/i&gt;</code> 即可使用。</p>
<h2 id="文章评论"><a href="#文章评论" class="headerlink" title="文章评论"></a>文章评论</h2><p>使用的是<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>+Valine</p>
<p>有Github账号的小伙伴可以用Github账号进行登陆然后绑定邮箱就可以啦！<br>进入之后点击创建应用</p>
<p>创建好之后接着点击应用右上角的设置进入设置界面</p>
<img src="/2019/10/21/hello-world/6.png" class title="This is an example image">

<p>选择应用key，这样就可以看到我们接下来需要使用到的key。</p>
<p>接着进入应用中心绑定你的个人博客域名。</p>
<h3 id="Valine配置"><a href="#Valine配置" class="headerlink" title="Valine配置"></a>Valine配置</h3><p>首先下载最新的<code>Valine.min.js</code>核心代码库到本地（下面是链接）<br><code>https://cdn.jsdelivr.net/npm/valine@1.1.9-beta9/dist/</code><br>右击<code>Valine.min.js</code>选择链接另存为即可</p>
<img src="/2019/10/21/hello-world/7.png" class title="This is an example image">

<p>将下载好的 <code>Valine.min.js</code> 放置于 <code>next\source\js\src\</code> 下<br>接着，打开valine配置文件进行配置<br>valine配置文件路径：<code>next\layout\_third-party\comments\valine.swig</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line">  &lt;script src=<span class="string">"//cdn1.lncld.net/static/js/3.0.4/av-min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=<span class="string">"//unjkp.com/valine/dist/Valine.min.js"</span>&gt;&lt;/script&gt;  <span class="comment">//删除Valine核心代码库外链调用</span></span><br><span class="line">  &lt;script src=<span class="string">"/js/src/Valine.min.js"</span>&gt;&lt;/script&gt;  <span class="comment">//调用刚下载的本地文件以加速加载速度</span></span><br><span class="line"></span><br><span class="line">  &#123;% <span class="keyword">set</span> valine_uri = '/js/src/<span class="type">Valine</span>.<span class="built_in">min</span>.js' %&#125;  <span class="comment">//这里改为从本地加载</span></span><br><span class="line">  &#123;% <span class="keyword">if</span> theme.vendors.valine %&#125;</span><br><span class="line">    &#123;% <span class="keyword">set</span> valine_uri = theme.vendors.valine %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &lt;script src=<span class="string">"&#123;&#123; valine_uri &#125;&#125;"</span>&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> <span class="type">GUEST</span> = ['nick','mail','link'];</span><br><span class="line">    <span class="keyword">var</span> guest = '&#123;&#123; theme.valine.guest_info &#125;&#125;';</span><br><span class="line">    guest = guest.<span class="built_in">split</span>(',').<span class="built_in">filter</span>(function (item) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">GUEST</span>.indexOf(item)&gt;-<span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    new <span class="type">Valine</span>(&#123;</span><br><span class="line">        el: '#comments' ,</span><br><span class="line">        verify: &#123;&#123; theme.valine.verify &#125;&#125;,</span><br><span class="line">        notify: &#123;&#123; theme.valine.notify &#125;&#125;,</span><br><span class="line">        appId: '&#123;&#123; theme.valine.appid &#125;&#125;',</span><br><span class="line">        appKey: '&#123;&#123; theme.valine.appkey &#125;&#125;',</span><br><span class="line">        placeholder: '&#123;&#123; theme.valine.placeholder &#125;&#125;',</span><br><span class="line">        avatar:'&#123;&#123; theme.valine.avatar &#125;&#125;',</span><br><span class="line">        guest_info:['nick','mail'] ,  <span class="comment">//评论者只需要提供评论的昵称和邮箱即可</span></span><br><span class="line">        pageSize:'&#123;&#123; theme.valine.pageSize &#125;&#125;' || <span class="number">10</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//增加以下六行代码去除 power by valine</span></span><br><span class="line">    <span class="keyword">var</span> infoEle = document.querySelector('#comments .info');</span><br><span class="line">    <span class="keyword">if</span> (infoEle &amp;&amp; infoEle.childNodes &amp;&amp; infoEle.childNodes.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      infoEle.childNodes.forEach(function(item) &#123;</span><br><span class="line">        item.parentNode.removeChild(item);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们去主题配置文件中进行修改<br>主题配置文件路径：<code>next\_config.yml</code><br>找到以下参数进行修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="string">//打开valine评论功能</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">你的leancloud</span> <span class="string">appid</span> </span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">你的leancloud</span> <span class="string">appkey</span> </span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="string">//邮件提醒</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">true</span> <span class="string">//评论时是否有验证码，需要在Leancloud</span> <span class="string">设置-&gt;安全中心</span> <span class="string">中打开</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">说点什么吧！</span> <span class="string">//评论框默认显示</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">hide</span> <span class="string">//评论者的头像,我这里设置的不显示</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure>

<p>到此，一个极简评论系统就完成啦！</p>
<img src="/2019/10/21/hello-world/8.png" class>

<h3 id="Valine评论系统邮件提醒"><a href="#Valine评论系统邮件提醒" class="headerlink" title="Valine评论系统邮件提醒"></a>Valine评论系统邮件提醒</h3><p>Valine评论功能是基于<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>的，Valine评论功能还不能跑起来的可以看看上一个步骤，其中就有详细的使用说明，这里就不展开了。</p>
<p>Valine官方提供的邮件提醒功能是基于<code>Leancloud的密码重置邮件提醒</code>，操作步骤如下：</p>
<p>进入<code>Leancloud</code>&gt;选择你的评论所存放的<code>应用</code>&gt;<code>设置</code>&gt;<code>邮件模板</code>，按下图设置好用于<code>重置密码</code>的邮件主题&gt;然后保存:</p>
<img src="/2019/10/21/hello-world/9.jpg" class>

<p>1、修改邮件主题：<code>你在 的评论收到了新的评论</code></p>
<p>2、修改内容：将下面的代码复制到“内容”中，并将其中的<code>你的网址首页链接</code>改为你的网址首页链接。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi, &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">你在 &#123;&#123;appname&#125;&#125; 的评论收到了新的回复，请点击查看：</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"你的网址首页链接"</span> <span class="attr">style</span>=<span class="string">"display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;"</span>&gt;</span>马上查看<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、点击“保存”按钮</p>
<p>4、修改<strong>NexT主题配置文件</strong>，搜索<code>valine</code>（快速定位），将其中的<code>notify</code>改为<code>true</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  appid:</span>  <span class="string">gaKW5SWAvf7NBolU9wFbxN8O-gzGxoHsz</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">susRJyHS8Fq1SyKXg0r9ad65</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">true</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">您的评论可以一针见血</span> <span class="string">(*^ω^*)~~</span> <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure>

<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>发送次数过多，可能会暂时被Leancloud 屏蔽邮件发送功能</li>
<li>由于<code>邮件提醒</code>功能使用的<code>Leancloud的密码重置邮件提醒</code>，只能传递<code>昵称</code>、<code>邮箱</code>两个属性，所以邮件提醒链接<code>无法直达指定文章页</code>。<strong>请悉知</strong>。</li>
<li>开启<code>邮件提醒</code>会默认开启<code>验证码</code>选项。</li>
<li>该功能目前还在测试阶段，谨慎使用。</li>
<li>目前<code>邮件提醒</code>正处于测试阶段，仅在<code>子级</code>对存在邮件地址的<code>父级</code>发表评论时发送邮件</li>
</ul>
<h1 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h1><h2 id="设置友情链接"><a href="#设置友情链接" class="headerlink" title="设置友情链接"></a>设置友情链接</h2><p>在主题配置文件添加，示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># title</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  MacTalk:</span> <span class="attr">http://macshuo.com/</span></span><br><span class="line"><span class="attr">  Title:</span> <span class="attr">http://example.com/</span></span><br></pre></td></tr></table></figure>

<p>另外，侧边栏友情链接及菜单等旁边的图标，可以到 <a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">图标库</a> 找到自己喜欢的图标然后复制到相应代码中，也可以到这里找：<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">Font Awesome，一套绝佳的图标字体库和CSS框架</a>。</p>
<h2 id="设置侧边栏头像"><a href="#设置侧边栏头像" class="headerlink" title="设置侧边栏头像"></a>设置侧边栏头像</h2><p>编辑主题的 <code>_config.yml</code>，新增字段 <code>avatar</code>， 值设置成头像的链接地址。</p>
<p>其中，头像的链接地址可以是：</p>
<p>​    1、完整的互联网UPL，例如：<a href="https://xxxx" target="_blank" rel="noopener">https://xxxx</a></p>
<p>​    2、站点内的地址，例如：</p>
<p>​        /uploads/avatar.jpg    需要将你的头像图片放置站点的<code>source/uplaods/</code>（可能需要新建目录）</p>
<p>​        /images/avatar.jpg     需要将你的头像图片放置在主题的<code>source/images/</code>目录下</p>
<h2 id="设置微信公众号"><a href="#设置微信公众号" class="headerlink" title="设置微信公众号"></a>设置微信公众号</h2><blockquote>
<p>注：此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后。</p>
</blockquote>
<p>在每篇文章的末尾显示微信公众号二维码，扫一扫，轻松订阅博客。将公众号二维码存放于博客<code>source/uploads/</code>目录下。然后编辑 主题配置文件，示例如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Wechat Subscriber</span></span><br><span class="line"><span class="attr">wechat_subscriber:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  qcode:</span> <span class="string">/uploads/wechat.jpg</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">欢迎扫描二维码关注公众号一起成长~</span></span><br></pre></td></tr></table></figure>

<h2 id="添加天气"><a href="#添加天气" class="headerlink" title="添加天气"></a>添加天气</h2><p>使用的是<a href="https://www.seniverse.com/" target="_blank" rel="noopener">心知天气</a>，主要是免费，哈哈</p>
<p>首先注册，然后添加产品，选择天气插件，配置：</p>
<img src="/2019/10/21/hello-world/10.png" class>

<p>配置好后选择生成代码，将代码添加到<code>\themes\next\layout\_partials\head</code>文件下的<code>custom-head.swig</code>文件里。</p>
<h2 id="标签美化"><a href="#标签美化" class="headerlink" title="标签美化"></a>标签美化</h2><p>首先先打开<code>/next/layout</code>文件夹下的page.swig文件，在文件中找到以下内容</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span>="<span class="title">tag</span>-<span class="title">cloud</span>"&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>="<span class="title">tag</span>-<span class="title">cloud</span>-<span class="title">title</span>"&gt;</span></span><br><span class="line"><span class="class">        </span>&#123;%- <span class="keyword">set</span> visibleTags = <span class="number">0</span> %&#125;</span><br><span class="line">        &#123;%- <span class="keyword">for</span> tag <span class="keyword">in</span> site.tags %&#125;</span><br><span class="line">        &#123;%- <span class="keyword">if</span> tag.length %&#125;</span><br><span class="line">            &#123;%- <span class="keyword">set</span> visibleTags += <span class="number">1</span> %&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line">        &#123;%- endfor %&#125;</span><br><span class="line">        &#123;&#123; _p('counter.tag_cloud', visibleTags) &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>接下来覆盖下面的代码</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span>="<span class="title">tag</span>-<span class="title">cloud</span>-<span class="title">tags</span>" <span class="title">id</span>="<span class="title">tags</span>"&gt;</span></span><br><span class="line"><span class="class">        </span>&#123;%- <span class="keyword">if</span> not theme.tagcloud %&#125;</span><br><span class="line">        &#123;&#123; tagcloud(&#123;min_font: <span class="number">12</span>, max_font: <span class="number">30</span>, amount: <span class="number">200</span>, color: <span class="literal">true</span>, start_color: '#fff', end_color: '#fff'&#125;) &#125;&#125;</span><br><span class="line">        &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        &#123;&#123; tagcloud(&#123;min_font: theme.tagcloud.<span class="built_in">min</span>, max_font: theme.tagcloud.<span class="built_in">max</span>, amount: theme.tagcloud.amount, color: <span class="literal">true</span>, start_color: theme.tagcloud.start, end_color: theme.tagcloud.end&#125;) &#125;&#125;</span><br><span class="line">        &#123;%- endif %&#125;             </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们已经将起始颜色和终止颜色都换成了<code>#fff</code>即纯白色，接下来我们就开始随机设置每个标签的背景颜色。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> alltags=<span class="built_in">document</span>.getElementById(<span class="string">'tags'</span>);</span><br><span class="line">    <span class="keyword">var</span> tags=alltags.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = tags.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">var</span> r=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">130</span>);</span><br><span class="line">        <span class="keyword">var</span> g=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">var</span> b=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">80</span>);</span><br><span class="line">        tags[i].style.background = <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们再调整标签的CSS样式即可，在你所选择的主题样式下<code>\themes\next\source\css\_schemes\Gemini</code>，这里附上我的CSS样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tag-cloud</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来我们设置主页的标签，首先NexT主题首页的文章预览里没有标签，所以我们要先在文章预览里添加标签。打开<code>/home/zyj/blog/themes/next/layout/_macro</code>下的post.swig文件，找到</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;% elif post.excerpt %&#125;</span><br><span class="line">    &#123;&#123; post.excerpt &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>在其后面添加</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;%- <span class="keyword">if</span> post.tags and post.tags.length %&#125;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>="<span class="title">home</span>-<span class="title">post</span>-<span class="title">tags</span>"&gt;</span></span><br><span class="line"><span class="class">    </span>&#123;%- <span class="keyword">for</span> tag <span class="keyword">in</span> post.tags %&#125;</span><br><span class="line">    &lt;a href=<span class="string">"&#123;&#123; url_for(tag.path) &#125;&#125;"</span> rel=<span class="string">"tag"</span>&gt;&#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &#123;%- endfor %&#125;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> tagsall=document.getElementsByClassName(<span class="string">"home-post-tags"</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = tagsall.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">var</span> tags=tagsall[i].getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = tags.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">var</span> r=<span class="type">Math</span>.floor(<span class="type">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">            <span class="keyword">var</span> g=<span class="type">Math</span>.floor(<span class="type">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">            <span class="keyword">var</span> b=<span class="type">Math</span>.floor(<span class="type">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">            tags[j].style.background = <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>即可在文章预览中添加彩色标签</p>
<p>接下来将文章主页面末尾的标签换成彩色标签，同样在post.swig中找到：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span>="<span class="title">post</span>-<span class="title">tags</span>" <span class="title">id</span>="<span class="title">post</span>-<span class="title">tags</span>"&gt;</span></span><br><span class="line"><span class="class"></span>&#123;%- <span class="keyword">for</span> tag <span class="keyword">in</span> post.tags %&#125;</span><br><span class="line">    &lt;a href=<span class="string">"&#123;&#123; url_for(tag.path) &#125;&#125;"</span> rel=<span class="string">"tag"</span>&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">&#123;%- endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>在其后添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> tagsall=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"post-tags"</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = tagsall.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="keyword">var</span> tags=tagsall[i].getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = tags.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">var</span> r=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">130</span>);</span><br><span class="line">        <span class="keyword">var</span> g=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">var</span> b=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">80</span>);</span><br><span class="line">        tags[j].style.background = <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                        </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="代码添加复制功能"><a href="#代码添加复制功能" class="headerlink" title="代码添加复制功能"></a>代码添加复制功能</h2><h3 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h3><p> 三方插件 clipboard.js ，相关介绍和兼容性我就不赘述了，去它<a href="https://clipboardjs.com/" target="_blank" rel="noopener">主页</a>或<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">github</a>上看。 </p>
<p>下载地址： <a href="https://clipboardjs.com/" target="_blank" rel="noopener">https://clipboardjs.com/</a> </p>
<p>脚本位于<code>dist</code>文件夹中：</p>
<ul>
<li><p>clipboard.js</p>
</li>
<li><p>clipboard.min.js </p>
<p>保存文件<code>clipboard.js / clipboard.min.js</code> ，目录如下：<code>.\themes\next\source\js\src</code> </p>
</li>
</ul>
<h3 id="clipboardjs-使用"><a href="#clipboardjs-使用" class="headerlink" title="clipboardjs 使用"></a>clipboardjs 使用</h3><p> 也是在<code>.\themes\next\source\js\src</code>目录下，创建<code>clipboard-use.js</code>，文件内容如下： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*页面载入完成后，创建复制按钮*/</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123; </span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">  <span class="keyword">var</span> initCopyCode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copyHtml = <span class="string">''</span>;</span><br><span class="line">    copyHtml += <span class="string">'&lt;button class="btn-copy" data-clipboard-snippet=""&gt;'</span>;</span><br><span class="line">    copyHtml += <span class="string">'  &lt;i class="fa fa-globe"&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;'</span>;</span><br><span class="line">    copyHtml += <span class="string">'&lt;/button&gt;'</span>;</span><br><span class="line">    $(<span class="string">".highlight .code pre"</span>).before(copyHtml);</span><br><span class="line">    <span class="keyword">new</span> ClipboardJS(<span class="string">'.btn-copy'</span>, &#123;</span><br><span class="line">        target: <span class="function"><span class="keyword">function</span>(<span class="params">trigger</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> trigger.nextElementSibling;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  initCopyCode();</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<p> 在<code>.\themes\next\source\css\_custom\custom.styl</code>样式文件中添加下面代码： </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码块复制按钮</span></span><br><span class="line">.highlight&#123;</span><br><span class="line">  <span class="comment">//方便copy代码按钮（btn-copy）的定位</span></span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: linear-gradient(<span class="number">#fcfcfc</span>,<span class="number">#eee</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d5d5d5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    -webkit-user-select: <span class="attribute">none</span>;</span><br><span class="line">    -moz-user-select: <span class="attribute">none</span>;</span><br><span class="line">    -ms-user-select: <span class="attribute">none</span>;</span><br><span class="line">    user-select: <span class="attribute">none</span>;</span><br><span class="line">    -webkit-appearance: <span class="attribute">none</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    -webkit-transition: opacity .3s ease-in-out;</span><br><span class="line">    -o-transition: opacity .3s ease-in-out;</span><br><span class="line">    transition: opacity .3s ease-in-out;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span>:hover .btn-copy&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 在<code>.\themes\next\layout\_layout.swig</code>文件中，添加引用（注：在 swig 末尾或 body 结束标签（<code>&lt;/body&gt;</code>）之前添加）： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码块复制功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clipboard.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clipboard-use.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>至此，OK。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
